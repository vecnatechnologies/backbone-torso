{
    "project": {
        "name": "backbone-torso",
        "description": "backbone-torso",
        "version": "0.8.12-1"
    },
    "files": {
        "modules/behaviors/DataBehavior.js": {
            "name": "modules/behaviors/DataBehavior.js",
            "modules": {
                "Torso.behaviors": 1,
                "Torso.behaviors.DataBehavior": 1
            },
            "classes": {
                "Torso.behaviors.DataBehavior": 1,
                "Torso.behaviors.DataBehavior.Data": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.behaviors": 1,
                "Torso.behaviors.DataBehavior": 1
            }
        },
        "modules/mixins/cacheMixin.js": {
            "name": "modules/mixins/cacheMixin.js",
            "modules": {
                "Torso": 1
            },
            "classes": {
                "Torso.Mixins.cacheMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Mixins": 1
            }
        },
        "modules/mixins/cellMixin.js": {
            "name": "modules/mixins/cellMixin.js",
            "modules": {},
            "classes": {
                "Torso.Mixins.cellMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Mixins": 1
            }
        },
        "modules/mixins/loadingMixin.js": {
            "name": "modules/mixins/loadingMixin.js",
            "modules": {},
            "classes": {
                "Torso.Mixins.loadingMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Mixins": 1
            }
        },
        "modules/mixins/pollingMixin.js": {
            "name": "modules/mixins/pollingMixin.js",
            "modules": {},
            "classes": {
                "Torso.Mixins.pollingMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Mixins": 1
            }
        },
        "modules/Behavior.js": {
            "name": "modules/Behavior.js",
            "modules": {},
            "classes": {
                "Behavior": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/Cell.js": {
            "name": "modules/Cell.js",
            "modules": {},
            "classes": {
                "Cell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/Collection.js": {
            "name": "modules/Collection.js",
            "modules": {},
            "classes": {
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/Events.js": {
            "name": "modules/Events.js",
            "modules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/FormModel.js": {
            "name": "modules/FormModel.js",
            "modules": {},
            "classes": {
                "FormModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/FormView.js": {
            "name": "modules/FormView.js",
            "modules": {},
            "classes": {
                "FormView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/ListView.js": {
            "name": "modules/ListView.js",
            "modules": {},
            "classes": {
                "ListView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/Model.js": {
            "name": "modules/Model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/NestedCell.js": {
            "name": "modules/NestedCell.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "modules/NestedModel.js": {
            "name": "modules/NestedModel.js",
            "modules": {},
            "classes": {
                "NestedModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/Router.js": {
            "name": "modules/Router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/ServiceCell.js": {
            "name": "modules/ServiceCell.js",
            "modules": {},
            "classes": {
                "ServiceCell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/View.js": {
            "name": "modules/View.js",
            "modules": {},
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/handlebarsUtils.js": {
            "name": "modules/handlebarsUtils.js",
            "modules": {},
            "classes": {
                "Torso.Utils.handlebarsUtils": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Utils": 1
            }
        },
        "modules/history.js": {
            "name": "modules/history.js",
            "modules": {},
            "classes": {
                "history": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/stickitUtils.js": {
            "name": "modules/stickitUtils.js",
            "modules": {},
            "classes": {
                "Torso.Utils.stickitUtils": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Utils": 1
            }
        },
        "modules/templateRenderer.js": {
            "name": "modules/templateRenderer.js",
            "modules": {},
            "classes": {
                "Torso.Utils.templateRenderer": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Utils": 1
            }
        },
        "modules/torso.js": {
            "name": "modules/torso.js",
            "modules": {},
            "classes": {
                "Torso": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modules/validation.js": {
            "name": "modules/validation.js",
            "modules": {},
            "classes": {
                "Torso.validation": 1
            },
            "fors": {},
            "namespaces": {
                "Torso": 1
            }
        }
    },
    "modules": {
        "Torso.behaviors": {
            "name": "Torso.behaviors",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Torso.behaviors": 1
            },
            "tag": "module",
            "file": "modules/behaviors/DataBehavior.js",
            "line": 88,
            "description": "Behaviors defined in Torso."
        },
        "Torso.behaviors.DataBehavior": {
            "name": "Torso.behaviors.DataBehavior",
            "submodules": {},
            "elements": {},
            "classes": {
                "Torso.behaviors.DataBehavior": 1,
                "Torso.behaviors.DataBehavior.Data": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.behaviors.DataBehavior": 1
            },
            "tag": "module",
            "file": "modules/behaviors/DataBehavior.js",
            "line": 928
        },
        "Torso": {
            "name": "Torso",
            "submodules": {},
            "elements": {},
            "classes": {
                "Torso.Mixins.cacheMixin": 1,
                "Torso.Mixins.cellMixin": 1,
                "Torso.Mixins.loadingMixin": 1,
                "Torso.Mixins.pollingMixin": 1,
                "Behavior": 1,
                "Cell": 1,
                "Collection": 1,
                "Events": 1,
                "FormModel": 1,
                "FormView": 1,
                "ListView": 1,
                "Model": 1,
                "NestedModel": 1,
                "Router": 1,
                "ServiceCell": 1,
                "View": 1,
                "Torso.Utils.handlebarsUtils": 1,
                "history": 1,
                "Torso.Utils.stickitUtils": 1,
                "Torso.Utils.templateRenderer": 1,
                "Torso": 1,
                "Torso.validation": 1
            },
            "fors": {},
            "namespaces": {
                "Torso.Mixins": 1,
                "Torso.Utils": 1,
                "Torso": 1
            },
            "tag": "module",
            "file": "modules/validation.js",
            "line": 100,
            "description": "Custom additions to the Backbone Collection object.\n- safe disposal methods for memory + event management\n- special functional overrides to support ID registration for different views",
            "author": "ariel.wexler@vecna.com, kent.willis@vecna.com",
            "itemtype": "method",
            "is_constructor": 1,
            "static": 1
        }
    },
    "classes": {
        "Torso.behaviors.DataBehavior": {
            "name": "Torso.behaviors.DataBehavior",
            "shortname": "DataBehavior",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior",
            "file": "modules/behaviors/DataBehavior.js",
            "line": 94,
            "description": "This behavior implements simplified interaction with data sources (i.e. TorsoCollection).\nThis behavior manages re-rendering when data changes and automatically adding the returned data to the view's context.\nThis behavior also manages dependencies between data and other objects to allow intelligent re-fetching when data changes.\n\nSee https://tonicdev.com/torso/databehavior for more in-depth documentation and details.",
            "itemtype": "method",
            "author": "jyoung@vecna.com"
        },
        "Torso.behaviors.DataBehavior.Data": {
            "name": "Torso.behaviors.DataBehavior.Data",
            "shortname": "Data",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior",
            "file": "modules/behaviors/DataBehavior.js",
            "line": 928,
            "description": "Data object used to create the .data property of the DataBehavior.",
            "is_constructor": 1
        },
        "Torso.Mixins.cacheMixin": {
            "name": "Torso.Mixins.cacheMixin",
            "shortname": "Torso.Mixins.cacheMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Mixins",
            "file": "modules/mixins/cacheMixin.js",
            "line": 15,
            "description": "Custom additions to the Backbone Collection object.\n- safe disposal methods for memory + event management\n- special functional overrides to support ID registration for different views"
        },
        "Torso.Mixins.cellMixin": {
            "name": "Torso.Mixins.cellMixin",
            "shortname": "Torso.Mixins.cellMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Mixins",
            "file": "modules/mixins/cellMixin.js",
            "line": 13,
            "description": "An non-persistable object that can listen to and emit events like a models."
        },
        "Torso.Mixins.loadingMixin": {
            "name": "Torso.Mixins.loadingMixin",
            "shortname": "Torso.Mixins.loadingMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Mixins",
            "file": "modules/mixins/loadingMixin.js",
            "line": 15,
            "description": "Loading logic."
        },
        "Torso.Mixins.pollingMixin": {
            "name": "Torso.Mixins.pollingMixin",
            "shortname": "Torso.Mixins.pollingMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Mixins",
            "file": "modules/mixins/pollingMixin.js",
            "line": 12,
            "description": "Periodic Polling Object to be mixed into Backbone Collections and Models.\n\nThe polling functionality should only be used for collections and for models that are not\npart of any collections. It should not be used for a model that is a part of a collection."
        },
        "Behavior": {
            "name": "Behavior",
            "shortname": "Behavior",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Behavior.js",
            "line": 29,
            "description": "Allows abstraction of common view logic into separate object"
        },
        "Cell": {
            "name": "Cell",
            "shortname": "Cell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Cell.js",
            "line": 12,
            "description": "An non-persistable object that can listen to and emit events like a models."
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Collection.js",
            "line": 13,
            "description": "Generic Collection"
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Events.js",
            "line": 13,
            "description": "Generic Events."
        },
        "FormModel": {
            "name": "FormModel",
            "shortname": "FormModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/FormModel.js",
            "line": 15,
            "description": "Generic Form Model"
        },
        "FormView": {
            "name": "FormView",
            "shortname": "FormView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/FormView.js",
            "line": 17,
            "description": "Generic Form View"
        },
        "ListView": {
            "name": "ListView",
            "shortname": "ListView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/ListView.js",
            "line": 143,
            "description": "A view that is backed by a collection that managers views per model in the collection."
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Model.js",
            "line": 13,
            "description": "Generic Model"
        },
        "NestedModel": {
            "name": "NestedModel",
            "shortname": "NestedModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/NestedModel.js",
            "line": 14,
            "description": "Generic Nested Model"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/Router.js",
            "line": 12,
            "description": "Backbone's router."
        },
        "ServiceCell": {
            "name": "ServiceCell",
            "shortname": "ServiceCell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/ServiceCell.js",
            "line": 12,
            "description": "A service cell is a event listening and event emitting object that is independent of any model or view."
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/View.js",
            "line": 43,
            "description": "Generic View that deals with:\n- Creation of private collections\n- Lifecycle of a view"
        },
        "Torso.Utils.handlebarsUtils": {
            "name": "Torso.Utils.handlebarsUtils",
            "shortname": "Torso.Utils.handlebarsUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Utils",
            "file": "modules/handlebarsUtils.js",
            "line": 16,
            "description": "Extensions to handlebars helpers."
        },
        "history": {
            "name": "history",
            "shortname": "history",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/history.js",
            "line": 13,
            "description": "Backbone's history object."
        },
        "Torso.Utils.stickitUtils": {
            "name": "Torso.Utils.stickitUtils",
            "shortname": "Torso.Utils.stickitUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Utils",
            "file": "modules/stickitUtils.js",
            "line": 13,
            "description": "Extensions to stickit handlers."
        },
        "Torso.Utils.templateRenderer": {
            "name": "Torso.Utils.templateRenderer",
            "shortname": "Torso.Utils.templateRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso.Utils",
            "file": "modules/templateRenderer.js",
            "line": 163,
            "description": "Static Template Engine.\nAll template renders should be piped through this method."
        },
        "Torso": {
            "name": "Torso",
            "shortname": "Torso",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "",
            "file": "modules/torso.js",
            "line": 54,
            "description": "File containing all dependencies that exports a single object with everything attached (same format as the global)."
        },
        "Torso.validation": {
            "name": "Torso.validation",
            "shortname": "Torso.validation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Torso",
            "namespace": "Torso",
            "file": "modules/validation.js",
            "line": 100,
            "description": "Validation object containing validation mixin."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 29,
            "description": "Converts string or number values into an array with a single string or number item.\nIf the input is not a string, number, array, or info about the ids then undefined is returned.\nThis is a private helper method used internally by this behavior and is not exposed in any way.",
            "params": [
                {
                    "name": "ids",
                    "description": "the ids to convert.",
                    "type": "String|Number|String[]|Number[]|Object",
                    "props": [
                        {
                            "name": "skipObjectRetrieval",
                            "description": "set if this is a meta-info object about the ids.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "an array of strings or numbers.",
                "type": "String[]|Number[]|Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 52,
            "description": "Converts any undefined or null values to an empty array.  All other values are left unchanged.",
            "params": [
                {
                    "name": "valueToConvert",
                    "description": "the value to check for null or undefined."
                }
            ],
            "return": {
                "description": "either the original value or [] if the valueToConvert is null or undefined.",
                "type": "Array|*"
            },
            "class": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 64,
            "description": "Gets a nested property from an object, returning undefined if it doesn't exist on any level.",
            "params": [
                {
                    "name": "rootObject",
                    "description": "object containing the property to get.",
                    "type": "Object"
                },
                {
                    "name": "propertyString",
                    "description": "string identifying the nested object to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "either undefined or the property referenced from the rootObject.",
                "type": "*"
            },
            "class": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 79,
            "description": "Determines if the stringDefinition contains a container definition (i.e. has a ':' in it).",
            "params": [
                {
                    "name": "stringDefinition",
                    "description": "to test."
                }
            ],
            "return": {
                "description": "true if the string definition contains a container definition, false otherwise.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 106,
            "description": "The torso collection that is acting as a cache used to create the private collections.\nThis property/option is required.  Instantiation will fail if it is not set.",
            "itemtype": "property",
            "name": "cache",
            "type": "Collection",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 113,
            "description": "Adds a listener on the Behavior for the `fetched` event that triggers a render on the view.\ntrue - A listener is added to the behavior that re-renders the view when a 'fetched' event is triggered.\nfalse (default) - no listeners are added.",
            "itemtype": "property",
            "name": "renderOnFetch",
            "type": "Boolean",
            "default": "false",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 122,
            "description": "Skip triggering a load of this data behavior when the view completes initializing.\ntrue - no load after the view is initialized.\nfalse (default) - trigger a .retrieve() on this data behavior when the view completes initialization.",
            "itemtype": "property",
            "name": "skipInitialLoad",
            "type": "Boolean",
            "default": "false",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 131,
            "description": "Determines the result of `view.getBehavior('thisBehaviorAlias').toJSON()`.\ntrue - a single model result is returned.\nfalse (default) - an array of model results are returned.",
            "itemtype": "property",
            "name": "returnSingleResult",
            "type": "Boolean",
            "default": "false",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 140,
            "description": "Determines whether `pull()` or `fetch()` is called when using `retrieve()`.\ntrue - Use fetch() by default on the private collection.\nfalse (default) - Use pull() by default on the private collection.\nTrue will query the server more often, but will provide more up-to-date data.\nFalse will only query the server if the model hasn't already been retrieved.\nThis property will be ignored if `fetch()` or `pull()` is called directly.",
            "itemtype": "property",
            "name": "alwaysFetch",
            "type": "Boolean",
            "default": "false",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 152,
            "description": "Duck-typed property that identifies the ids to use. id or ids is required (either by behavior options or as properties).\n  - {String|Number} - the id to use directly (equivalent to an array of a single id).\n  - {String[]|Number[]} - the ids to use directly.\n  - {Object} - more complex configuration that identifies a model-like object that fires a change event and the\n               property on that object to use. The object can fire the change event for the given property\n               and have a .get('propertyName') method, or it can define the property directly on the idContainer.\n               Only one property can be identified as supplying the id for this data model.\n               If the identified object does not fire a change event then the id(s) will never be refreshed for this behavior.\n               The idContainer can also fire a 'fetched:ids' event on itself to signal to this data behavior that the ids\n               have been fetched for the first time.  Then a 'change:<propertyName>' event can be used to notify this\n               data behavior that the property has been modified.\n    - property {String} - the name of the property that defines the ids. The root object is assumed to be the view unless\n                          idContainer is defined. The idContainer is the object that fires a change event for the given property name.\n                          Uses the view or the idContainer as the root to get the identified property (i.e. 'viewState.', 'model.', etc).\n                          Will get the property before the first '.' from the view and if it is an object will try to use a\n                          .get('<propertyName>') on it and set a 'change:<propertyName>' listener on it.\n                          If it is a string/number or array of string/number, then it will use that as the ids.\n                          Triggering a 'id-container-updated' event on the behavior will cause it to stop listing to the\n                          old idContainer and start listening to the new one defined by this property.\n    - idContainer {Cell|Backbone.Model|Function} - object (or a function that returns an object) that fires change\n                          events and has a .get('propertyName') function. It isn't required to fire events -\n                          the change event is only required if it needs to re-fetch when the id property value changes.\n    Examples:\n      - { property: '_patientId' }\n      - { property: 'viewState.appointmentId' }\n      - { property: 'model.type' }\n      - { property: 'behaviors.demographics.data.appointments' }\n      - { property: 'id', idContainer: userService }\n      - { property: 'username', idContainer: function() { application.getCurrentUser() } }\n  - {Function(cache)} - expected to return the ids (either array, jquery deferred that resolves to the ids or single primitive)\n                        to track with the private collection. Cache is passed in as the first argument so that the behavior\n                        can be defined and the cache can be overridden later.\n                        'this' is the behavior (from which you can get the view if needed).\n                        What was criteria should use this instead:\n\n        function(cache) {\n          var thisBehaviorInstance = this;\n          var view = this.view;\n          var criteria = { ... some criteria ... };\n          return cache.fetchIdsByCriteria(criteria);\n        }",
            "itemtype": "property",
            "name": "ids",
            "type": "String|Number|String[]|Number[]|Object|Function",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 198,
            "description": "cause this behavior to re-calculate its ids and refetch them from the server if the given events are triggered\n(space separated if string, single item is equivalent to array of single item).\n  - 'view:eventName' - arbitrary event triggered on the view (eventName can be a change:propertyName event).\n  - 'viewState:eventName' - arbitrary event triggered on the viewState (eventName can be a change:propertyName event).\n  - 'model:eventName' - arbitrary even triggered on the view's model (eventName can be a change:propertyName event).\n  - 'this:eventName' - arbitrary event triggered by this behavior (eventName can be a change:propertyName event).\n  - 'behaviorAlias:eventName' - arbitrary event triggered by another data behavior on this view (eventName can be a change:propertyName event).\n  - 'behaviorAlias.data:eventName' - arbitrary event triggered by the data of another DataBehavior on this view (eventName can be a change:propertyName event).\n  - { '<eventName>': < object (or function returning an object) that the event is triggered on > } - arbitrary ('<eventName>') triggered on the supplied object.",
            "itemtype": "property",
            "name": "updateEvents",
            "type": "String|String[]|Object|Object[]",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 212,
            "description": "Object that manages interaction with the data.  Contains the privateCollection, proxies all events from the privateCollection,\nand has get('...') and .toJSON() methods that access the private collection data.",
            "itemtype": "property",
            "name": "data",
            "type": "Torso.behaviors.DataBehavior.Data",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 219,
            "description": "The possible fetched statuses.  This is the status value of the fetched event payload.",
            "itemtype": "property",
            "name": "FETCHED_STATUSES  { SUCCESS: 'SUCCESS', FAILURE: 'FAILURE' }",
            "type": "Object",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 225,
            "itemtype": "method",
            "name": "constructor",
            "override": "",
            "params": [
                {
                    "name": "behaviorState",
                    "description": "the initial state of the behavior.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "behaviorOptions",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "cache",
                            "description": "see cache property.",
                            "type": "Collection"
                        },
                        {
                            "name": "renderOnFetch",
                            "description": "see renderOnFetch property.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "skipInitialLoad",
                            "description": "see skipInitialLoad property.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "returnSingleResult",
                            "description": "see returnSingleResult property.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "alwaysFetch",
                            "description": "see alwaysFetch property.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "id",
                            "description": "|Function} see id property.",
                            "type": "String|Number|String[]|Number[]|property: String, idContainer: Object",
                            "optional": true,
                            "optdefault": "behaviorOptions.ids"
                        },
                        {
                            "name": "ids",
                            "description": "|Function} see ids property.",
                            "type": "String|Number|String[]|Number[]|property: String, idContainer: Object",
                            "optional": true,
                            "optdefault": "behaviorOptions.id"
                        },
                        {
                            "name": "updateEvents",
                            "description": "see updateEvents property.",
                            "type": "String|String[]|Object|Object[]",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "viewOptions",
                    "description": "options passed to View's initialize",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 281,
            "description": "Retrieves the ids for this data object and passes them off to the private collection to track and then does a\npull or a fetch based on the alwaysFetch property.  (pull is default if always fetch is true then it fetches instead).",
            "itemtype": "method",
            "name": "retrieve",
            "return": {
                "description": "a jquery deferred promise that resolves to the retrieved models.",
                "type": "$.Deferred.Promise"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 295,
            "description": "Retrieves the ids for this data object and passes them off to the private collection's trackAndPull() method.",
            "itemtype": "method",
            "name": "pull",
            "return": {
                "description": "a jquery deferred promise that resolves to the retrieved models.",
                "type": "$.Deferred.Promise"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 317,
            "description": "Retrieves the ids for this data object and passes them off to the private collection's trackAndFetch() method.",
            "itemtype": "method",
            "name": "fetch",
            "return": {
                "description": "a jquery deferred promise that resolves to the retrieved models.",
                "type": "$.Deferred.Promise"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 339,
            "description": "Adds the toJSON of the data represented by this behavior to the context.",
            "itemtype": "method",
            "name": "prepare",
            "override": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 353,
            "description": "Determine if the behavior is loading objects or ids.",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "true - the behavior is currently loading objects or ids.\n                  false - the behavior is not currently loading objects or ids.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 363,
            "description": "Determine if the behavior is loading ids.",
            "itemtype": "method",
            "name": "isLoadingIds",
            "return": {
                "description": "true - the behavior is currently loading ids.\n                  false - the behavior is not currently loading ids.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 373,
            "description": "Determine if the behavior is loading objects.",
            "itemtype": "method",
            "name": "isLoadingObjects",
            "return": {
                "description": "true - the behavior is currently loading objects.\n                  false - the behavior is not currently loading objects.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 383,
            "description": "Listens for the change event on the ids property and, if triggered, re-fetches the data based on the new ids.",
            "itemtype": "method",
            "name": "listenToIdsPropertyChangeEvent",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 402,
            "description": "Removes the listener added by listenToIdsPropertyChangeEvent().",
            "itemtype": "method",
            "name": "stopListeningToIdsPropertyChangeEvent",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 415,
            "description": "This is a good way to have something be called after at least one retrieve (pull or fetch) has completed.\nThis is especially useful if you don't care if the fetch has already happen you just want to do something once\nthe data is loaded.\n\nThis can also be done purely by listening for the 'fetched' event, but you might miss the event if it is fired\nbefore you start listening.  This gives a structure for handling that case so that your methods are called\nif the event is fired and if it is not fired.\n\nThis also gives the ability to distinguish between a successful and failed fetch easily using the promises\nresolve/reject handlers.\n\nUsage:\n\nsomeDataBehavior.retrieveOncePromise()\n  .then(view.doSomethingWithTheData, view.handleFiledFetch);",
            "itemtype": "method",
            "name": "retrieveOncePromise",
            "return": {
                "description": "that resolves when the data is successfully fetched and rejects when the fetch fails.",
                "type": "jQuery.Promise"
            },
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 455,
            "description": "Removes existing listeners and adds new ones for all of the updateEvents configured.",
            "itemtype": "method",
            "name": "_delegateUpdateEvents",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 468,
            "description": "Removes existing event listeners.",
            "itemtype": "method",
            "name": "_undelegateEvents",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 480,
            "description": "Parses this.updateEvents configuration.",
            "return": {
                "description": "]} an array of objects with the event name and idContainer included.",
                "type": "[ eventName: String, idContainer: Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 491,
            "description": "Parses an individual event configuration.\nNote: events defined using objects can have more than one event defined w/in the object.",
            "params": [
                {
                    "name": "updateEventConfiguration",
                    "description": "the configuration for an individual event configuration.",
                    "type": "String | Object"
                }
            ],
            "return": {
                "description": "] | undefined} an array of objects with the event name and idContainer included.\n                                                               If the event could not be parsed, undefined is returned.",
                "type": "[ eventName: String, idContainer: Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 520,
            "description": "Validates that the cache property is valid and if not throws an error describing why its not valid.",
            "itemtype": "method",
            "name": "__validateCache",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 534,
            "description": "Validates that the ids property is valid and if not throws an error describing why its not valid.\nA side effect of this method is copying id into the ids location (if id is set).  Ids is what is used by the rest of the code.\nThis is done as part of validation because we first validate that both are not set.",
            "itemtype": "method",
            "name": "__normalizeAndValidateIds",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 549,
            "description": "Validates that the ids property is valid and if not throws an error describing why its not valid.\nA side effect of this method is copying id into the ids location (if id is set).  Ids is what is used by the rest of the code.\nThis is done as part of validation because we first validate that both are not set.",
            "itemtype": "method",
            "name": "__normalizeAndValidateIds",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 583,
            "description": "Validates that the updateEvents property is valid and if not throws an error describing why its not valid.",
            "itemtype": "method",
            "name": "__normalizeAndValidateUpdateEvents",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 607,
            "description": "Validates that the updateEventConfiguration is valid and if not throws an error describing why its not valid.",
            "itemtype": "method",
            "name": "__normalizeAndValidateIds",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 620,
            "itemtype": "method",
            "name": "__getIds",
            "return": {
                "description": "A jquery deferred promise that resolves to the ids to track in the private collection\n                             or rejects with the error message.\n                             It can also return an object that prevents object retrieval ({ skipObjectRetrieval: true }).",
                "type": "$.Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 667,
            "description": "Sets the loading ids property to false (loading completed).",
            "itemtype": "method",
            "name": "__completeLoadingIds",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 676,
            "description": "Converts the definition into the actual idContainer object and property name to retrieve off of that idContainer.",
            "itemtype": "method",
            "name": "__parseIdsPropertyNameAndIdContainer",
            "return": {
                "description": "} the name of the ids property and the actual object to use as the idContainer.",
                "type": "IdsPropertyName: String, idContainer: Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 708,
            "description": "Parses the idContainer property of ids.",
            "return": {
                "description": "the idContainer object to apply the properties value to (may not be the final idContainer depending on the property definition).",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 729,
            "description": "Parses a string that contains a container and details for that container (event name or property name).\nStrings are expected to be of the form '<some container path>:<detail>'.",
            "params": [
                {
                    "name": "fullContainerAndDetail",
                    "description": ""
                }
            ],
            "return": {
                "description": "} the idContainer is the actual object containing the ids.\n        details is the rest of the idContainer string without the idContainer definition.",
                "type": "Detail: String, idContainer: *"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 776,
            "description": "Parse a string type update event.\nContext Key (first part of the string up to the first ':') can be one of the following:\n  this (maps to the behavior),\n  view or empty (maps to the behavior's view),\n  viewState (maps to the behavior's view's viewState),\n  model (maps to the behavior's view's model),\n  <*> any others are assumed to be the names of behaviors on this behavior's view.",
            "params": [
                {
                    "name": "updateEventConfiguration",
                    "description": "a string representation of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "} the parsed configuration with the event name and idContainer object.",
                "type": "{eventName: String, idContainer: Backbone.Events"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 798,
            "description": "Rejects the promise chain if this behavior is already disposed.",
            "return": {
                "description": "that is resolved if the behavior is not disposed and rejects if the behavior is disposed.",
                "type": "jQuery.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 815,
            "description": "Triggers a 'fetched' event with the payload { status: 'success' } when the fetch completes successfully.",
            "itemtype": "method",
            "name": "__fetchSuccess",
            "params": [
                {
                    "name": "response",
                    "description": "the response from the server.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "skipObjectRetrieval",
                            "description": "if we retrieved objects, then trigger fetch event.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceFetchedEvent",
                            "description": "if true then trigger fetch no matter what.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 841,
            "description": "Triggers a 'fetched' event with the payload { status: 'failed' } when the fetch fails.",
            "itemtype": "method",
            "name": "__fetchFailed",
            "params": [
                {
                    "name": "response",
                    "description": "the response from the server.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "skipObjectRetrieval",
                            "description": "if we retrieved objects, then trigger fetch event.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceFetchedEvent",
                            "description": "if true then trigger fetch no matter what.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "emptyIds",
                            "description": "true if were are no ids retrieved.  False otherwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 871,
            "description": "Determines if the 'fetched' event should be triggered in the __fetchFailed or __fetchSuccess methods.",
            "params": [
                {
                    "name": "response",
                    "description": "to use to determine if the fetched event should be triggered.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "skipObjectRetrieval",
                            "description": "if we retrieved objects, then trigger fetch event.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceFetchedEvent",
                            "description": "if true then trigger fetch no matter what.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "true if the fetched event should be triggered, false otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 883,
            "description": "Skip retrieving objects if new ids list is empty and existing ids list is empty.",
            "itemtype": "method",
            "name": "__skipRetrieveOnEmptyTrackedIdsAndNewIds",
            "params": [
                {
                    "name": "idsResult",
                    "description": "",
                    "type": "Array|Object"
                }
            ],
            "return": {
                "description": "either the original idsResult\n                       or { skipObjectRetrieval: true, forceFetchedEvent: true } if both the ids retrieved\n                       and the current ids are empty.",
                "type": "Array|Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 900,
            "description": "Adds listeners when the view is activated.",
            "itemtype": "method",
            "name": "_activate",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 911,
            "description": "Stops listening when the view is deactivated.",
            "itemtype": "method",
            "name": "_deactivate",
            "access": "private",
            "tagname": "",
            "class": "Torso.behaviors.DataBehavior",
            "module": "Torso.behaviors",
            "namespace": "Torso.behaviors"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 938,
            "description": "Instantiates the data objects and binds it to this behavior instance.",
            "params": [
                {
                    "name": "options",
                    "description": "to pass to the initialize methods.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parentBehavior",
                            "description": "the data behavior instance that this Data object should be bound to.",
                            "type": "DataBehavior"
                        },
                        {
                            "name": "privateCollection",
                            "description": "the private collection that this data represents.",
                            "type": "Collection"
                        }
                    ]
                }
            ],
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 945,
            "description": "The dataBehavior instance that owns this data object.",
            "itemtype": "property",
            "name": "parentBehavior",
            "type": "DataBehavior",
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 950,
            "description": "The private collection that this data object manages.",
            "itemtype": "property",
            "name": "privateCollection",
            "type": "Collection",
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 959,
            "description": "Determine if behavior is loading ids or objects.",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "true - the behavior is loading objects or ids.\n                  false - the behavior is not loading objects or ids.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 969,
            "description": "Determine if the behavior is loading ids.",
            "itemtype": "method",
            "name": "isLoadingIds",
            "return": {
                "description": "true - the behavior is currently loading ids.\n                  false - the behavior is not currently loading ids.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 979,
            "description": "Determine if the behavior is loading objects.",
            "itemtype": "method",
            "name": "isLoadingObjects",
            "return": {
                "description": "true - the behavior is currently loading objects.\n                  false - the behavior is not currently loading objects.",
                "type": "Boolean"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 989,
            "description": "Get the full data object contents.  Either an array if returnSingleResult is false or a single object if it is true.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "containing the full contents of either the collection or model.",
                "type": "Object|Object[]"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1010,
            "description": "Get the full data object contents (either an array of model attributes or a single model attribute based on the\nvalue of propertyName) or the value of a specific property if a single result is expected.\n\nIf returnSingleResult is true then this will return the given property from the model (if that model exists).\nIf returnSingleResult is false then this will return an array containing that property from all of the retrieved models.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "propertyName",
                    "description": "the property to get from the model(s).",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "containing the full contents of either the collection or model.",
                "type": "Object|Object[]"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1039,
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "modelId",
                    "description": "The id of the model to get from the collection.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "either the model with the given id or the only model on this behavior (if model id is undefined).",
                "type": "Backbone.Model"
            },
            "throws": {
                "description": "an error if there are more than 1 result or the configuration of the behavior specifies returnSingleResult === false."
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1064,
            "itemtype": "method",
            "name": "getModels",
            "return": {
                "description": "new array containing all the models in the data's private collection.",
                "type": "Backbone.Model[]"
            },
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1072,
            "description": "Adds the listeners to the private collection.",
            "itemtype": "method",
            "name": "activate",
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1080,
            "description": "Removes the listeners on the private collection.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/behaviors/DataBehavior.js",
            "line": 1088,
            "description": "Dispose of the data events.",
            "class": "Torso.behaviors.DataBehavior.Data",
            "module": "Torso.behaviors.DataBehavior",
            "namespace": "Torso.behaviors.DataBehavior"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 29,
            "description": "Returns a new class of collection that inherits from the parent but not the cacheMixin\nand adds a requesterMixin that connects this cache to it's parent",
            "itemtype": "method",
            "name": "createRequesterCollectionClass",
            "params": [
                {
                    "name": "parent",
                    "description": "the parent of the private collection",
                    "type": "Backbone Collection instance"
                },
                {
                    "name": "guid",
                    "description": "the unique code of the owner of this private collection",
                    "type": "String"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 40,
            "description": "A mixin that overrides base collection methods meant for cache's and tailors them\nto a requester.",
            "itemtype": "method",
            "name": "requesterMixin",
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 47,
            "itemtype": "method",
            "name": "requesterMixin.getTrackedIds",
            "return": {
                "description": "array of ids that this collection is tracking",
                "type": "Array"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 55,
            "description": "Will force the cache to fetch just the registered ids of this collection",
            "itemtype": "method",
            "name": "requesterMixin.fetch",
            "params": [
                {
                    "name": "options",
                    "description": "- argument options",
                    "optional": true,
                    "props": [
                        {
                            "name": "idsToFetch",
                            "description": "- A list of request Ids, will default to current tracked ids",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "collectionTrackedIds"
                        },
                        {
                            "name": "setOptions",
                            "description": "- if a set is made, then the setOptions will be passed into the set method",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise that will resolve when the fetch is complete",
                "type": "Promise"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 76,
            "description": "Will force the cache to fetch a subset of this collection's tracked ids",
            "itemtype": "method",
            "name": "requesterMixin.fetchByIds",
            "params": [
                {
                    "name": "ids",
                    "description": "array of model ids",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "if given, will pass the options argument to this.fetch. Note, will not affect options.idsToFetch",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "promise that will resolve when the fetch is complete",
                "type": "Promise"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 89,
            "description": "Pass a list of ids to begin tracking. This will reset any previous list of ids being tracked.\nOverrides the Id registration system to route via the parent collection",
            "itemtype": "method",
            "name": "requesterMixin.trackIds",
            "params": [
                {
                    "name": "ids",
                    "description": "The list of ids that this collection wants to track"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 101,
            "description": "Adds a new model to the requester collection and tracks the model.id",
            "itemtype": "method",
            "name": "requesterMixin.addModelAndTrack",
            "params": [
                {
                    "name": "model",
                    "description": "the model to be added",
                    "type": "Backbone Model"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 112,
            "description": "Tracks a new id",
            "itemtype": "method",
            "name": "requesterMixin.trackNewId",
            "params": [
                {
                    "name": "id",
                    "description": "the id attribute of the model",
                    "type": "String or Number"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 121,
            "description": "Will begin tracking the new ids and then ask the cache to fetch them\nThis will reset any previous list of ids being tracked.",
            "itemtype": "method",
            "name": "requesterMixin.trackAndFetch",
            "return": {
                "description": "the promise of the fetch by ids"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 132,
            "description": "Will force the cache to fetch any of this collection's tracked models that are not in the cache\nwhile not fetching models that are already in the cache. Useful when you want the effeciency of\npulling models from the cache and don't need all the models to be up-to-date.\n\nIf the ids being fetched are already being fetched by the cache, then they will not be re-fetched.\n\nThe resulting promise is resolved when ALL items in the process of being fetched have completed.\nThe promise will resolve to a unified data property that is a combination of the completion of all of the fetches.",
            "itemtype": "method",
            "name": "requesterMixin.pull",
            "params": [
                {
                    "name": "options",
                    "description": "if given, will pass the options argument to this.fetch. Note, will not affect options.idsToFetch",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "promise that will resolve when the fetch is complete with all of the data that was fetched from the server.\n                  Will only resolve once all ids have attempted to be fetched from the server.",
                "type": "Promise"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 174,
            "description": "Will register the new ids and then pull in any models not stored in the cache. See this.pull() for\nthe difference between pull and fetch.",
            "itemtype": "method",
            "name": "requesterMixin.trackAndPull",
            "return": {
                "description": "the promise of the fetch by ids"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 185,
            "description": "Handles the disposing of this collection as it relates to a requester collection.",
            "itemtype": "method",
            "name": "requesterMixin.requesterDispose",
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 193,
            "description": "In addition to removing the model from the collection also remove it from the list of tracked ids.",
            "params": [
                {
                    "name": "modelIdentifier",
                    "description": "same duck-typing as Backbone.Collection.get():\n                             by id, cid, model object with id or cid properties,\n                             or an attributes object that is transformed through modelId",
                    "type": "*"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 214,
            "description": "Adds functions to manage state of requesters",
            "itemtype": "method",
            "name": "cacheMixin",
            "params": [
                {
                    "name": "collection",
                    "description": "the collection to add this mixin",
                    "type": "Collection"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 223,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "cacheMixin.setRequestedIds",
            "params": [
                {
                    "name": "guid",
                    "description": "the global unique identifier for the requester",
                    "type": "String"
                },
                {
                    "name": "array",
                    "description": "the array of ids the requester wants",
                    "type": "Array"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 238,
            "itemtype": "method",
            "name": "cacheMixin.getRequesterIds",
            "params": [
                {
                    "name": "the",
                    "description": "global unique id of the requester",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an array of the ids the requester with the guid has requested",
                "type": "Array"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 247,
            "itemtype": "method",
            "name": "cacheMixin.getRequesterIdsAsDictionary\nThis method is used for quick look up of a certain id within the list of requested ids",
            "params": [
                {
                    "name": "guid",
                    "description": "the global unique id of the requester",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an dictionary of id -> id of the requester ids for a given requester.",
                "type": "Object"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 257,
            "itemtype": "method",
            "name": "cacheMixin.removeRequester\nRemoves a requester from this cache. No longer receives updates",
            "params": [
                {
                    "name": "guid",
                    "description": "the global unique id of the requester",
                    "type": "String"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 267,
            "description": "NOTE: this methods returns only the guids for requester collections that are currently tracking ids\nTODO: should this return just the knownPrivateCollections",
            "itemtype": "method",
            "name": "cacheMixin.getRequesters",
            "return": {
                "description": "an array of the all requesters in the form of their GUID's",
                "type": "Array"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 277,
            "description": "Return the list of Ids requested by this collection",
            "itemtype": "method",
            "name": "cacheMixin.getAllRequestedIds",
            "return": {
                "description": "the corresponding requested Ids",
                "type": "Array"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 286,
            "description": "Used to return a collection of desired models given the requester object.\nBinds a custom \"resized\" event to the private collections.\nOverrides the fetch method to call the parent collection's fetchByIds method.\nOverrides the registerIds method to redirect to its parent collection.",
            "itemtype": "method",
            "name": "cacheMixin.createPrivateCollection",
            "params": [
                {
                    "name": "guid",
                    "description": "Identifier for the requesting view",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an new empty collection of the same type as \"this\"",
                "type": "Collection"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 304,
            "description": "Registers a list of Ids that a particular object cares about and pushes\nany cached models its way.\n\nThis method intelligently updates the \"_requestedIds\" field to contain all unique\nrequests for Ids to be fetched.  Furthermore, the \"polledFetch\" method\nis overriden such that it no longer routes through Backbone's fetch all,\nbut rather a custom \"fetchByIds\" method.",
            "itemtype": "method",
            "name": "cacheMixin.registerIds",
            "params": [
                {
                    "name": "newIds",
                    "description": "- New ids to register under the requester",
                    "type": "Array"
                },
                {
                    "name": "guid",
                    "description": "- The GUID of the object that wants the ids",
                    "type": "String"
                }
            ],
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 366,
            "description": "Overrides the base fetch call if this.fetchUsingTrackedIds is true\nCalling fetch from the cache will fetch the tracked ids if fetchUsingTrackedIds is set to true, otherwise\nit will pass through to the default fetch.",
            "itemtype": "method",
            "name": "fetch",
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 383,
            "description": "A custom fetch operation to only fetch the requested Ids.",
            "itemtype": "method",
            "name": "cacheMixin.fetchByIds",
            "params": [
                {
                    "name": "options",
                    "description": "- argument options",
                    "optional": true,
                    "props": [
                        {
                            "name": "idsToFetch",
                            "description": "- A list of request Ids, will default to current tracked ids",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "collection.collectionTrackedIds"
                        },
                        {
                            "name": "setOptions",
                            "description": "- if a set is made, then the setOptions will be passed into the set method",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "the promise of the fetch",
                "type": "Promise"
            },
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cacheMixin.js",
            "line": 481,
            "description": "The constructor constructor / initialize method for collections.\nAllocate new memory for the local references if they\nwere null when this method was called.",
            "params": [
                {
                    "name": "options",
                    "description": "- optional options object",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fetchHttpAction",
                            "description": "http action used to get objects by ids",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'POST'"
                        },
                        {
                            "name": "getByIdsUrl",
                            "description": "path appended to collection.url to get objects by a list of ids",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'/ids'"
                        },
                        {
                            "name": "fetchUsingTrackedIds",
                            "description": "if set to false, cache.fetch() will not pass to fetchByIds with current tracked ids\n                                                              but will rather call the default fetch method.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "constructor",
            "class": "Torso.Mixins.cacheMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/cellMixin.js",
            "line": 21,
            "description": "Whether a cell can pass as a model or not.\nIf true, the cell will not fail is persisted functions are invoked\nIf false, the cell will throw exceptions if persisted function are invoked",
            "itemtype": "property",
            "name": "isModelCompatible",
            "type": "Boolean",
            "default": "false",
            "class": "Torso.Mixins.cellMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 26,
            "description": "Adds the loading mixin",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "args",
                    "description": "the arguments to the base constructor method",
                    "type": "Object"
                }
            ],
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 40,
            "itemtype": "method",
            "name": "hasLoadedOnce",
            "return": {
                "description": "true if this model/collection has ever loaded from a fetch call",
                "type": "Boolean"
            },
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 48,
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "true if this model/collection is currently loading new values from the server",
                "type": "Boolean"
            },
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 56,
            "itemtype": "method",
            "name": "getLoadedOncePromise",
            "return": {
                "description": "a promise that will resolve when the model/collection has loaded for the first time",
                "type": "Promise"
            },
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 64,
            "description": "Wraps the base fetch in a wrapper that manages loaded states",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "options",
                    "description": "- the object to hold the options needed by the base fetch method",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The loadWrapper promise",
                "type": "Promise"
            },
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/loadingMixin.js",
            "line": 74,
            "description": "Base load function that will trigger a \"load-begin\" and a \"load-complete\" as\nthe fetch happens. Use this method to wrap any method that returns a promise in loading events",
            "itemtype": "method",
            "name": "__loadWrapper",
            "params": [
                {
                    "name": "fetchMethod",
                    "description": "- the method to invoke a fetch",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "- the object to hold the options needed by the fetchMethod",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise when the fetch method has completed and the events have been triggered",
                "type": "Promise"
            },
            "class": "Torso.Mixins.loadingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 23,
            "itemtype": "property",
            "name": "pollTimeoutId  The id from when setTimeout was called to start polling.",
            "type": "Number",
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 30,
            "description": "Returns true if the poll is active",
            "itemtype": "method",
            "name": "isPolling",
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 38,
            "description": "Starts polling Model/Collection by calling fetch every pollInterval.\nNote: Each Model/Collection will only allow a singleton of polling to occur so\nas not to have duplicate threads updating Model/Collection.",
            "itemtype": "method",
            "name": "startPolling",
            "params": [
                {
                    "name": "pollInterval",
                    "description": "interval between each poll in ms.",
                    "type": "Integer"
                }
            ],
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 62,
            "description": "Stops polling Model and clears all Timeouts.",
            "itemtype": "method",
            "name": "stopPolling",
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 71,
            "description": "By default, the polled fetching operation is routed directly\nto backbone's fetch all.",
            "itemtype": "method",
            "name": "polledFetch",
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/mixins/pollingMixin.js",
            "line": 82,
            "description": "Private function to recursively call itself and poll for db updates.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__poll",
            "class": "Torso.Mixins.pollingMixin",
            "module": "Torso",
            "namespace": "Torso.Mixins"
        },
        {
            "file": "modules/Behavior.js",
            "line": 38,
            "description": "Unique name of the behavior instance w/in a view.  More human readable than the cid.",
            "itemtype": "property",
            "name": "alias",
            "type": "String",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 42,
            "itemtype": "property",
            "name": "cidPrefix of Behaviors",
            "type": "{String}",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 48,
            "description": "Add functions to be added to the view's public API. They will be behavior-scoped.",
            "itemtype": "property",
            "name": "mixin",
            "type": "{Object}",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 55,
            "description": "The behavior's prepare result will be combined with the view's prepare with the behavior's alias as the namespace.\neffectively: { <behaviorName>: behavior.prepare() } will be combined with the view's prepare result.",
            "itemtype": "method",
            "name": "prepare",
            "return": {
                "description": "a prepare context suitable to being added to the view's prepare result."
            },
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 63,
            "itemtype": "method",
            "name": "constructor",
            "override": "",
            "params": [
                {
                    "name": "behaviorAttributes",
                    "description": "the initial value of the behavior's attributes.",
                    "type": "Object"
                },
                {
                    "name": "behaviorOptions",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "view",
                            "description": "that Behavior is attached to",
                            "type": "Backbone.View"
                        },
                        {
                            "name": "alias",
                            "description": "the alias for the behavior in this view.",
                            "type": "Backbone.View"
                        }
                    ]
                },
                {
                    "name": "viewOptions",
                    "description": "options passed to View's initialize",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 88,
            "description": "This is called after the view's initialize method is called and will wrap the view's prepare()\nsuch that it returns the combination of the view's prepare result with the behavior's prepare result\ninside it under the behavior's alias.",
            "itemtype": "method",
            "name": "__augmentViewPrepare",
            "access": "private",
            "tagname": "",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 101,
            "description": "Wraps the view's prepare such that it returns the combination of the view and behavior's prepare results.",
            "itemtype": "method",
            "name": "__viewPrepareWrapper",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "viewPrepare",
                    "description": "the prepare method from the view.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the combined view and behavior prepare() results.\n{\n  <behavior alias>: behavior.prepare(),\n  ... // view prepare properties.\n}",
                "type": "Object"
            },
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 120,
            "description": "Registers defined lifecycle methods to be called at appropriate time in view's lifecycle",
            "itemtype": "method",
            "name": "__bindLifecycleMethods",
            "access": "private",
            "tagname": "",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 134,
            "description": "Adds behavior's event handlers to view\nBehavior's event handlers fire on view events but are run in the context of the behavior",
            "itemtype": "method",
            "name": "__bindEventCallbacks",
            "access": "private",
            "tagname": "",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 165,
            "description": "Namespaces events in event hash",
            "itemtype": "method",
            "name": "__namespaceEvents",
            "params": [
                {
                    "name": "eventHash",
                    "description": "to namespace",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "with event namespaced with '.behavior' and the cid of the behavior",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 188,
            "itemtype": "method",
            "name": "__bindEventCallbacksToBehavior",
            "params": [
                {
                    "name": "eventHash",
                    "description": "keys are event descriptors, values are String method names or functions",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event hash with values as methods bound to view",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 203,
            "description": "Removes all listeners, stops listening to events.\nAfter dispose is called, the behavior can be safely garbage collected.\nCalled when the owning view is disposed.",
            "itemtype": "method",
            "name": "__dispose",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 217,
            "description": "Method to be invoked when dispose is called. By default calling dispose will remove the\nbehavior's on's and listenTo's.\nOverride this method to destruct any extra",
            "itemtype": "method",
            "name": "_dispose",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Behavior.js",
            "line": 225,
            "return": {
                "description": "true if the view was disposed",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isDisposed",
            "class": "Behavior",
            "module": "Torso"
        },
        {
            "file": "modules/Collection.js",
            "line": 21,
            "description": "The default filter.  Always returns itself.",
            "itemtype": "method",
            "name": "filterDefault",
            "return": {
                "description": "a new instance of this collection",
                "type": "Collection"
            },
            "class": "Collection",
            "module": "Torso"
        },
        {
            "file": "modules/Collection.js",
            "line": 30,
            "description": "Will abolish all listeners and events that are hooked\nto this collection.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Collection",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 23,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "__currentMappings",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 28,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "__cache",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 33,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "__currentObjectModels",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 38,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "__currentUpdateEvents",
            "type": "Array",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 43,
            "itemtype": "property",
            "name": "validation",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 47,
            "itemtype": "property",
            "name": "labels",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 51,
            "description": "Map from aliases (either model names or computed value names) to mappings.\nPlease refer to the documentation on the constructor about the form and options for this field.",
            "itemtype": "property",
            "name": "mapping",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 59,
            "description": "Map from model aliases to model instances.\nPlease refer to the documentation on the constructor about the form and options for this field.",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 67,
            "description": "Constructor the form model. Can take in attributes to set initially. These will override any pulled values from object models\non initialization. On initialization the object model's values will be pulled once.\nFor the options, here are needed definitions:\nmapping: {\n  modelName: 'foo bar baz' // track a model by providing an alias for a name and a space seperated list of fields to track as a String\n  modelName2: true          // to track all fields\n  ...                      // can have many model mappings\n  computedName: {\n    modelName: 'taz raz',  // mappings for models that will be used for this computed mapping.\n    ...                    // can have many model mappings for a computed\n    pull: function(models) {}, // a callback that will be invoked when pulling data from the Object model. Passes in a map of model alias/name to shallow copies of fields being tracked on that model.\n    push: function(models) {}  // a callback that will be invoked when pushing data to the Object model. Passes in a map of model alias/name to object model being tracked under that alias.\n  }\n},\nmodels: {\n  modelName: modelInstance,  // optionally, provide a set of model instance to model name (aliases) to start tracking\n  modelName2: modelInstance2 // provide as many aliases to model instances as you'd like\n}",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mapping",
                            "description": "map from aliases (either model names or computed value names) to mappings.\n    A model mapping can bind an alias to a space seperated list of fields to track as a String  r the boolean true if it is mapping all the\n    fields. A computed mapping can bind an alias to a set of model mappings required for this computed value and both a pull and/or push method\n    that are used to compute different values to or from object model(s).",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "models",
                            "description": "Because the options.mapping parameter only allows you to define the mappings to aliases, this options allows\n    you to bind model instances to aliases. Setting model instances to aliases are required to actually begin pulling/pushing values.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "startUpdating",
                            "description": "set to true if you want to immediately set up listeners to update this form\n    model as the object model updates. You can always toggle this state with startUpdating() and stopUpdating().",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "validation",
                            "description": "A Backbone.Validation plugin hash to dictate the validation rules",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "A Backbone.Validation plugin hash to dictate the attribute labels",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 129,
            "itemtype": "method",
            "name": "getMapping",
            "params": [
                {
                    "name": "alias",
                    "description": "the alias of the mapping - either a model mapping or a computed mapping",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the mapping config for that alias"
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 138,
            "itemtype": "method",
            "name": "getMappings",
            "return": {
                "description": "all the current mapping configs"
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 146,
            "description": "Define or redefine how the form model pull/pushes or otherwise tracks properties between an object model(s).\nExamples:\nthis.setMapping('modelAlias', true, optional model instance);\nthis.setMapping('modelAlias, 'foo bar baz', optional model instance);\nthis.setMapping('computedAlias', {\n  model1: 'foo',\n  model2: 'bar',\n  push: function(models) {\n    models.model1.set('foo', this.get('foobar')[0]);\n    models.model2.set('bar', this.get('foobar')[1]);\n  },\n  pull: function(models) {\n    this.set('foobar', [models.model1.foo, models.model2.bar]);\n  },\n}, optional model map)",
            "itemtype": "method",
            "name": "setMapping",
            "params": [
                {
                    "name": "alias",
                    "description": "the name for the mapping - either a model mapping or a computed mapping",
                    "type": "String"
                },
                {
                    "name": "mapping",
                    "description": "Provides the mapping for this alias. If trying to map to a model, then either provide\n a space delimited list of fields to track as a String or the boolean true to track all the model's fields. If the mapping is for\n a computed value, then provide a map from model alias to model mapping for all the fields needed for the computed and a pull method\n if you want to change/combine/split object model properties before bringing them into the form model and a push method if you want to\n change/combine/split form model properties before pushing them to the object models.",
                    "type": "String, Boolean or Object"
                },
                {
                    "name": "models",
                    "description": "Provides instances to use for this mapping. If mapping is a computed,\n  provide a map from alias to model instance. If mapping is for a single model, just provide the model instance for that alias.",
                    "type": "Object or Backbone.Model instance",
                    "optional": true
                },
                {
                    "name": "copy",
                    "description": "if true, will pull values definined by this mapping after setting the mapping. Requires models to be passed in.",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 209,
            "description": "Sets multiple mappings (both model mappings and computed value mappings) with one call.\nUses the same style of mapping syntax as the constructor. Please refer to the documentation on the constructor.\nHere is an example:\nthis.setMappings({\n  model1: 'foo bar',\n  model2: 'baz',\n  ssn: {\n    model1: 'ssn',\n    model2: 'lastssn'\n    push: function(models) {},\n    pull: function(models) {},\n  }\n}, optional model map)",
            "itemtype": "method",
            "name": "setMappings",
            "params": [
                {
                    "name": "mappings",
                    "description": "Uses the same style of mapping syntax as the constructor. Please refer to the documentation on the constructor.",
                    "type": "Object"
                },
                {
                    "name": "models",
                    "description": "this parameter allows you to immediately bind model instances to aliases. Keys are aliases and values are backbone model instances.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "copy",
                    "description": "if true, will pull values definined by this mapping after setting the mapping. Requires models to be passed in.",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 237,
            "description": "Remove a mapping (model or computed) by alias",
            "itemtype": "method",
            "name": "unsetMapping",
            "params": [
                {
                    "name": "aliasOrModel",
                    "description": "if a String is provided, it will unset the mapping with that alias.\n  If a Backbone Model instance is provided, it will remove the model mapping that was bound to that model.",
                    "type": "String or Backbone.Model instance"
                },
                {
                    "name": "removeModelIfUntracked",
                    "description": "If true, after the mapping is removed, the model will also be unset but only if\n  no other mappings reference it. Note, setting this to true will not remove any computed mappings that also use that model.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 256,
            "description": "Removes all current mappings\nDoes NOT remove current model being tracked. Call this.untrackModels afterwards if you wish this behavior.",
            "itemtype": "method",
            "name": "unsetMappings",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 266,
            "description": "Returns the object model currently bound to the given name/alias.",
            "itemtype": "method",
            "name": "getTrackedModel",
            "params": [
                {
                    "name": "alias",
                    "description": "the name/alias used by the mappings.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model currently bound to the alias",
                "type": "Backbone Model instance"
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 276,
            "description": "Returns all the currently tracked object models",
            "itemtype": "method",
            "name": "getTrackedModels",
            "return": {
                "description": "all the currently tracked object models"
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 285,
            "description": "See {{#crossLink \"FormModel/trackModel:method\"}}.trackModel(){{/crossLink}}",
            "itemtype": "method",
            "name": "setTrackedModel",
            "deprecated": true,
            "deprecationMessage": "use .trackModel() instead.",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 294,
            "description": "Update or create a binding between an object model and an alias.",
            "itemtype": "method",
            "name": "trackModel",
            "params": [
                {
                    "name": "alias",
                    "description": "the alias/name to bind to.",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model to be bound. Mappings referencing this alias will start applying to this model.",
                    "type": "Backbone Model instance"
                },
                {
                    "name": "copy",
                    "description": "if true, the form model will perform a pull on any mappings using this alias.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 321,
            "description": "See {{#crossLink \"FormModel/trackModels:method\"}}.trackModels(){{/crossLink}}",
            "deprecated": true,
            "deprecationMessage": "use .trackModels() instead.",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 329,
            "description": "Binds multiple models to their aliases.",
            "itemtype": "method",
            "name": "trackModels",
            "params": [
                {
                    "name": "models",
                    "description": "A map from alias/name to model to be bound to that alias.",
                    "type": "Map from String to Backbone Model instances"
                },
                {
                    "name": "copy",
                    "description": "if true, the form model will perform a pull on any mapping using these models.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 341,
            "description": "See {{#crossLink \"FormModel/untrackModel:method\"}}.untrackModel(){{/crossLink}}",
            "itemtype": "method",
            "name": "unsetTrackedModel",
            "deprecated": true,
            "deprecationMessage": "use .untrackModel() instead.",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 350,
            "description": "Removes the binding between a model alias and a model instance. Effectively stops tracking that model.",
            "itemtype": "method",
            "name": "untrackModel",
            "params": [
                {
                    "name": "aliasOrModel",
                    "description": "If a string is given, it will unset the model using that alias. If a model instance\n  is given, it will unbind whatever alias is currently bound to it.",
                    "type": "String or Backbone Model instance"
                }
            ],
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 367,
            "description": "See {{#crossLink \"FormModel/untrackModels:method\"}}.untrackModels(){{/crossLink}}",
            "itemtype": "method",
            "name": "unsetTrackedModels",
            "deprecated": true,
            "deprecationMessage": "use .untrackModels() instead.",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 376,
            "description": "Removes all the bindings between model aliases and model instances. Effectively stops tracking the current models.",
            "itemtype": "method",
            "name": "untrackModels",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 386,
            "description": "Pushes values from this form model back to the object models it is tracking. This includes invoking the push callbacks from\ncomputed values",
            "itemtype": "method",
            "name": "push",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 397,
            "description": "Pulls the most recent values of every object model that this form model tracks including computed values\nNOTE: using this method can override user-submitted data from an HTML form. Use caution.",
            "itemtype": "method",
            "name": "pull",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 409,
            "description": "If FormModel has a \"url\" property defined, it will invoke a save on the form model, and after successfully\nsaving, will perform a push.\nIf no \"url\" property is defined then the following behavior is used:\nPushes the form model values to the object models it is tracking and invokes save on each one. Returns a promise.\nNOTE: if no url is specified and no models are being tracked, it will instead trigger a 'save-fail' event and reject the returned promise\nwith a payload that mimics a server response: {none: { success: false, response: [{ responseJSON: { generalReasons: [{messageKey: 'no.models.were.bound.to.form'}] }}] }}",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "rollback",
                            "description": "if true, when any object model fails to save, it will revert the object\n    model attributes to the state they were before calling save. NOTE: if there are updates that happen\n    to object models within the timing of this save method, the updates could be lost.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "[options.force=true]  if false, the form model will check to see if an update has been made\n    to any object models it is tracking since it's last pull. If any stale data is found, save with throw an exception\n    with attributes: {name: 'Stale data', staleModels: [Array of model cid's]",
                    "description": "}",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "when using a \"url\", a promise is returned for the save on this form model.\n        If not using a \"url\", a promise that will either resolve when all the models have successfully saved in which case the context returned\n  is an array of the responses (order determined by first the array of models and then the array of models used by\n  the computed values, normalized), or if any of the saves fail, the promise will be rejected with an array of responses.\n  Note: the size of the failure array will always be one - the first model that failed. This is a side-effect of $.when"
            },
            "itemtype": "method",
            "name": "save",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 468,
            "itemtype": "method",
            "name": "isTrackingAnyObjectModel",
            "return": {
                "description": "true if this form model is backed by an Object model. That means that at least one object model was bound to an mapping alias."
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 476,
            "itemtype": "method",
            "name": "isUpdating",
            "return": {
                "description": "true if any updates to an object model will immediately copy new values into this form model."
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 484,
            "description": "Will add listeners that will automatically pull new updates from this form's object models.",
            "params": [
                {
                    "name": "pullFirst",
                    "description": "if true, the form model will pull most recent values then start listening",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "itemtype": "method",
            "name": "startUpdating",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 498,
            "description": "This will stop the form model from listening to its object models.",
            "itemtype": "method",
            "name": "stopUpdating",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 509,
            "description": "If updating, it will reset the updating events to match the current mappings.",
            "itemtype": "method",
            "name": "resetUpdating",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 520,
            "params": [
                {
                    "name": "model",
                    "description": "the backbone model that is being checked",
                    "type": "Backbone.Model"
                },
                {
                    "name": "staleModels",
                    "description": "a hash that will be updated to contain this model if it is stale in the form: cid -> model.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "currentHashValues",
                    "description": "If passed an object, it will look in this cache for the current value of the object model\n  instead of calculating it. It should be key'ed by the model's cid",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if the model passed in has been changed since the last pull from the object model.",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isModelStale",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 546,
            "return": {
                "description": "an array of the object models that have been updated since the last pull from this form model",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "checkIfModelsAreStale",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 561,
            "description": "Sets up a listener to update the form model if the model's field (or any field) changes.",
            "params": [
                {
                    "name": "model",
                    "description": "the object model from which this form model will start listen to changes",
                    "type": "Backbone.Model"
                },
                {
                    "name": "field",
                    "description": "the field name that it will start listening to. If no field is given, it will listen to the general 'change' event.",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "__listenToModelField",
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 584,
            "description": "Sets up a listener on one (or all) of the fields that is needed to update a computed value",
            "params": [
                {
                    "name": "model",
                    "description": "the object model from which this form model will start listen to changes",
                    "type": "Backbone.Model"
                },
                {
                    "name": "field",
                    "description": "the field name that it will start listening to. If no field is given, it will listen to the general 'change' event.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "computedAlias",
                    "description": "the name/alias of the computed mapping being used.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "__listenToComputedValuesDependency",
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 607,
            "description": "Returns the models that a currently being tracked that are part of a computed mapping\nIf there is a missing model (a model alias is referenced but no model instance is bound to that alias), then it will return undefined.",
            "itemtype": "method",
            "name": "__getComputedModels",
            "params": [
                {
                    "name": "computedAlias",
                    "description": "the name/alias of the computed mapping",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a map from model name/alias to model instance. If there is a missing model (an model alias is referenced but no model\n  instance is bound to that alias), then it will return undefined.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 630,
            "description": "Returns the aliases/names of models referenced in the computed mapping with the given alias",
            "itemtype": "method",
            "name": "__getModelAliases",
            "params": [
                {
                    "name": "computedAliasOrConfig",
                    "description": "the name/alias of the computed mapping or the computed mapping itself as\n  an object if it hasn't been added as a mapping yet.",
                    "type": "String or Object"
                }
            ],
            "return": {
                "description": "an array of the model names/aliases referenced inside the computed mapping",
                "type": "Array of Strings"
            },
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 651,
            "description": "Repackages a computed mapping to be easier consumed by methods wanting the model mappings tied to the model instances.\nReturns a list of objects that contain the model instance and the mapping for that model.",
            "itemtype": "method",
            "name": "__getComputedModelConfigs",
            "params": [
                {
                    "name": "computedAlias",
                    "description": "the name/alias used for this computed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a list of objects that contain the model instance under \"model\" and the mapping for that model under \"fields\".",
                "type": "Array of Objects"
            },
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 673,
            "description": "Pushes the form model values to the object models it is tracking and invokes save on each one. Returns a promise.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "rollback",
                            "description": "if true, when any object model fails to save, it will revert the object\n    model attributes to the state they were before calling save. NOTE: if there are updates that happen\n    to object models within the timing of this save method, the updates could be lost.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "[options.force=true]  if false, the form model will check to see if an update has been made\n    to any object models it is tracking since it's last pull. If any stale data is found, save with throw an exception\n    with attributes: {name: 'Stale data', staleModels: [Array of model cid's]",
                    "description": "}",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a promise that will either resolve when all the models have successfully saved in which case the context returned\n  is an array of the responses (order determined by first the array of models and then the array of models used by\n  the computed values, normalized), or if any of the saves fail, the promise will be rejected with an array of responses.\n  Note: the size of the failure array will always be one - the first model that failed. This is a side-effect of $.when"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__saveToModels",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 753,
            "description": "Pulls in new information from tracked models using the mapping defined by the given alias.\nThis works for both model mappings and computed value mappings",
            "itemtype": "method",
            "name": "__pull",
            "params": [
                {
                    "name": "alias",
                    "description": "the name of the mapping that will be used during the pull",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 780,
            "description": "Pushes form model information to tracked models using the mapping defined by the given alias.\nThis works for both model mappings and computed value mappings",
            "itemtype": "method",
            "name": "__push",
            "params": [
                {
                    "name": "alias",
                    "description": "the name of the mapping that will be used during the push",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 810,
            "description": "Updates a single attribute in this form model.\nNOTE: requires the context of this function to be:\n{\n formModel: <this form model>,\n field: <the field being updated>\n}\nNOT the form model itself like if you called this.__updateFormField.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__updateFormField",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 826,
            "description": "NOTE: When looking to update the form model manually, call this.pull().\nUpdates this form model with the changed attributes of a given object model",
            "params": [
                {
                    "name": "model",
                    "description": "the object model that has been changed",
                    "type": "Backbone.Model instance"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__updateFormModel",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 840,
            "description": "Updates the form model's snapshot of the model's attributes to use later",
            "params": [
                {
                    "name": "model",
                    "description": "the object model",
                    "type": "Backbone.Model instance"
                },
                {
                    "name": "cache",
                    "description": "if passed an object (can be empty), this method will fill\n  this cache object instead of this form model's __cache field",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "this.__cache"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__updateCache",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 861,
            "description": "Create a hash value of a simple object",
            "params": [
                {
                    "name": "obj",
                    "description": "simple object with no functions",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a hash value of the object"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__hashValue",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 872,
            "description": "Returns the alias/name bound to the model passed in. If a string is passed in, it will just return this string.",
            "itemtype": "method",
            "name": "__findAlias",
            "params": [
                {
                    "name": "aliasOrModel",
                    "description": "If string, just returns this string. If a model instance, then the alias\n  that is bound to the tracked model passed in will be found and returned.",
                    "type": "String or Backbone.Model instance"
                }
            ],
            "return": {
                "description": "the alias",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 893,
            "params": [
                {
                    "name": "model",
                    "description": "the model to create the hash value from",
                    "type": "Backbone.Model instance"
                }
            ],
            "return": {
                "description": "the hash value of the model making sure to only use the tracked fields",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateHashValue",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 904,
            "return": {
                "description": "a map of model's cid to the hash value of the model making sure to only use the tracked fields",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateAllHashValues",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 917,
            "description": "Deep clones the attributes. There should be no functions in the attributes",
            "params": [
                {
                    "name": "val",
                    "description": "a non-function value",
                    "type": "Object|Array|Basic Data Type"
                }
            ],
            "return": {
                "description": "the clone"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__cloneVal",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 936,
            "description": "Attaches listeners to the tracked object models with callbacks that will copy new properties into this form model.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__setupListeners",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 972,
            "description": "Copies fields from one backbone model to another. Is useful during a pull or push to/from Object models. The values will\nbe deep cloned from the origin to the destination.",
            "params": [
                {
                    "name": "fields",
                    "description": "a string of attribute names on the origin model that will be copied. Leave null if all attributes\n  are to be copied",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "destination",
                    "description": "the backbone model that will have values copied into",
                    "type": "Backbone.Model"
                },
                {
                    "name": "origin",
                    "description": "the backbone model that will be used to grab values.",
                    "type": "Backbone.Model"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__copyFields",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 997,
            "description": "Sets the mapping using the form model's default mapping or the options.mappings if available.\nAlso sets the tracked models if the form model's default models or the options.models is provided.",
            "itemtype": "method",
            "name": "__initMappings",
            "params": [
                {
                    "name": "options",
                    "description": "See initialize options: 'mapping' and 'models'.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 1016,
            "description": "Returns a map where the keys are the fields that are being tracked on tracked model and values are\nthe with current values of those fields.",
            "params": [
                {
                    "name": "model",
                    "description": "the object model",
                    "type": "Backbone.Model instance"
                }
            ],
            "return": {
                "description": "aa map where the keys are the fields that are being tracked on tracked model and\n  values are the with current values of those fields.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__getTrackedModelFields",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 1053,
            "description": "Returns a useful data structure that binds a tracked model to the fields being tracked on a mapping.",
            "itemtype": "method",
            "name": "__createModelConfig",
            "params": [
                {
                    "name": "modelAlias",
                    "description": ""
                },
                {
                    "name": "fields",
                    "description": "the fields that the model is tracking. Can be undefined if tracking all fields.\n  When creating a model config for a computed mapping, the fields refers to the fields being tracked only for that computed value.",
                    "type": "Array of Strings or undefined"
                }
            ],
            "return": {
                "description": "a binding between a tracked model and the fields its tracking for a mapping. If no tracked model is bound to the modelAlias,\n  it will return undefined.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 1073,
            "description": "Returns an array of convenience data structures that bind tracked models to the fields they are tracking for each mapping,\nincluding model mappings inside computed mappings. There will be a model config for each tracked model on a computed mapping\nmeaning there can be multiple model configs for the same tracked model.",
            "itemtype": "method",
            "name": "__getAllModelConfigs",
            "return": {
                "description": "array of convenience data structures that bind tracked models to the fields they are tracking for each mapping,\n  including model mappings inside computed mappings.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormModel.js",
            "line": 1100,
            "description": "A wrapper function that can invoke the pull callback on a computed mapping during an event callback.\nBecause an event callback predetermines the argument list, this method assumes the necessary computed configuration is\nbound as the part of the function context.\nWhen invoking the pull callback, it will pass in a object map from model alias to shallow copy of the tracked fields the\ncomputed value uses. It is NOT just the model, but a  copy of its attributes - feel free to change the properties.\nExample:\nfooBar: {\n  myModel: 'foo bar',\n  pull: function(models) {\n    console.log(models.myModel.foo, models.myModel.bar)\n  }\n}\nIf any model mapping is tracking all fields by passing true as its config, a copy of all the attributes for that model will be provided.",
            "params": [
                {
                    "name": "model",
                    "description": "the model that was updated. If provided, the cache will be updated\nNOTE: requires the context of this function to be:\n{\n formModel: <this form model>,\n alias: <the computed alias>,\n}",
                    "type": "Backbone.Model",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__invokeComputedPull",
            "class": "FormModel",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 25,
            "description": "Validation error hash",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_errors",
            "type": "Object",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 31,
            "description": "Validation success",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_success",
            "type": "Boolean",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 37,
            "description": "Stickit bindings hash local backup",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_bindings",
            "type": "Object",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 43,
            "description": "Handlebars template for form",
            "itemtype": "property",
            "name": "template",
            "type": "HTMLtemplate",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 48,
            "description": "Backbone events hash",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 53,
            "description": "Two-way binding field customization",
            "itemtype": "property",
            "name": "fields",
            "type": "Object",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 58,
            "description": "Stickit bindings hash",
            "itemtype": "property",
            "name": "bindings",
            "type": "Object",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 63,
            "description": "The class to be used when instantiating the form model",
            "itemtype": "property",
            "name": "FormModelClass",
            "type": "Torso.FormModel class extension",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 69,
            "description": "Constructor the form view object.",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "args",
                    "description": "- options argument",
                    "type": "Object",
                    "props": [
                        {
                            "name": "model",
                            "description": "- a form model for binding that defaults to class-level\n                                                                   model or instantiates a FormModelClass",
                            "type": "Torso.FormModel",
                            "optional": true,
                            "optdefault": "new FormModelClass()"
                        },
                        {
                            "name": "FormModelClass",
                            "description": "- the class that will be used as the FormModel. Defaults to a class-level\n                                                     definition or Torso.FormModel if none is provided",
                            "optional": true,
                            "optdefault": "Torso.FormModel"
                        },
                        {
                            "name": "template",
                            "description": "- overrides the template used by this view",
                            "type": "HTML Template",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "- merge + override the events hash used by this view",
                            "type": "Events Hash",
                            "optional": true
                        },
                        {
                            "name": "fields",
                            "description": "- merge + override automated two-way binding field hash used by this view",
                            "type": "Field Hash",
                            "optional": true
                        },
                        {
                            "name": "bindings",
                            "description": "- merge + override custom epoxy binding hash used by this view",
                            "type": "Binding Hash",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 105,
            "description": "Prepare the formview's default render context",
            "itemtype": "method",
            "name": "prepare",
            "return": {
                "description": "{Object.errors} A hash of field names mapped to error messages\n        {Object.success} A boolean value of true if validation has succeeded",
                "type": "Object"
            },
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 119,
            "description": "Override the delegate events and wrap our custom additions",
            "itemtype": "method",
            "name": "delegateEvents",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 130,
            "description": "Resets the form model with the passed in model. Stops listening to current form model\nand sets up listeners on the new one.",
            "itemtype": "method",
            "name": "resetModelListeners",
            "params": [
                {
                    "name": "model",
                    "description": "the new form model",
                    "type": "Torso.FormModel"
                },
                {
                    "name": "stopListening",
                    "description": "if true, it will stop listening to the previous form model",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 146,
            "description": "Default method called on validation success.",
            "itemtype": "method",
            "name": "valid",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 155,
            "description": "Default method called on validation failure.",
            "itemtype": "method",
            "name": "valid",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 164,
            "description": "Deactivate callback that removes bindings and other resources\nthat shouldn't exist in a dactivated state",
            "itemtype": "method",
            "name": "deactivate",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 175,
            "description": "For use in a feedback's \"then\" callback\nChecks to see if the form model's field is valid. If the field is invalid, it adds the class.\nIf the field is invalid, it removes the class. When an array is passed in for the fieldName,\nit will validate all the fields together as if they were one (any failure counts as a total failure,\nand all fields need to be valid for success).",
            "params": [
                {
                    "name": "fieldName",
                    "description": "the name of the form model field or an array of field names",
                    "type": "String or Array<String>"
                },
                {
                    "name": "className",
                    "description": "the class name to add or remove",
                    "type": "String"
                },
                {
                    "name": "onValid",
                    "description": "if true, will reverse the logic operator",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_thenAddClassIfInvalid",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 200,
            "description": "For use in a feedback's \"then\" callback\nChecks to see if the form model's field is valid. If the field is invalid, it sets the text.\nIf the field is invalid, it removes the text. When an array is passed in for the fieldName,\nit will validate all the fields together as if they were one (any failure counts as a total failure,\nand all fields need to be valid for success).",
            "params": [
                {
                    "name": "fieldName",
                    "description": "the name of the form model field or an array of field names",
                    "type": "String or Array<String>"
                },
                {
                    "name": "text",
                    "description": "the text to set",
                    "type": "String"
                },
                {
                    "name": "onValid",
                    "description": "if true, will reverse the logic operator",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_thenAddTextIfInvalid",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 227,
            "description": "Selects all data-model references in this view's DOM, and creates stickit bindings",
            "itemtype": "method",
            "name": "__generateStickitBindings",
            "access": "private",
            "tagname": "",
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 252,
            "itemtype": "method",
            "name": "__getFieldOptions",
            "params": [
                {
                    "name": "attr",
                    "description": "An attribute of the model",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Any settings that are associates with that attribute",
                "type": "Object"
            },
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 262,
            "itemtype": "method",
            "name": "__generateModelFieldBinding",
            "params": [
                {
                    "name": "field",
                    "description": "A specific model field",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Additional behavior options for the bindings",
                    "type": "Object",
                    "props": [
                        {
                            "name": "modelFormat",
                            "description": "The function called before setting model values",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "viewFormat",
                            "description": "The function called before setting view values",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "<Stickit Binding Hash>"
            },
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/FormView.js",
            "line": 290,
            "itemtype": "method",
            "name": "__generateSelectOptions",
            "params": [
                {
                    "name": "element",
                    "description": "The select element to generate options for",
                    "type": "Element"
                },
                {
                    "name": "opts",
                    "description": "Additional behavior options for the bindings",
                    "type": "Object",
                    "props": [
                        {
                            "name": "modelFormat",
                            "description": "The function called before setting model values",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "<Stickit select options hash>"
            },
            "class": "FormView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 17,
            "description": "If one exists, this method will clear the delayed render timeout and invoke render",
            "params": [
                {
                    "name": "view",
                    "description": "the list view",
                    "type": "ListView"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "breakDelayedRender",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 33,
            "description": "Aggregates calls to render by waiting a certain amount of time and then rendering.\nCalls that happen while it is waiting, will be swallowed. Useful for when you want to\nbatch render calls",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "aggregateRenders",
            "params": [
                {
                    "name": "wait",
                    "description": "the number of milliseconds to wait before rendering",
                    "type": "Number"
                },
                {
                    "name": "view",
                    "description": "the list view",
                    "type": "ListView"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 58,
            "description": "Handles the removal of an item view if a model has been removed from the collection",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "removeItemView",
            "params": [
                {
                    "name": "model",
                    "description": "the model that has been removed",
                    "type": "Backbone Model instance"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 74,
            "description": "Disposes of an item view, unregisters, stops tracking and triggers a 'item-view-removed' event\nwith the model and an item view as the payload.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_removeItemView",
            "params": [
                {
                    "name": "itemView",
                    "description": "the view being removed",
                    "type": "Backbone View instance"
                },
                {
                    "name": "modelId",
                    "description": "the id used for the model",
                    "type": "String or Number"
                },
                {
                    "name": "model",
                    "description": "the model",
                    "type": "Backbone Model instance",
                    "optional": true
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 92,
            "description": "Handles the addition of an item view if a model has been added to the collection.\nWhen possible, it will append the view instead of causing a rerender",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addItemView",
            "params": [
                {
                    "name": "model",
                    "description": "the model being added"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 109,
            "description": "Adds the new item view before or after a sibling view. If no sibling view exists\nor if this item view is the first, it will cause a re-render. This method will break\nany delayed renders and force a re-render before continuing.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addItemView",
            "params": [
                {
                    "name": "itemView",
                    "description": "the view being added"
                },
                {
                    "name": "indexOfModel",
                    "description": "- the index of the model into the array of models to render"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 151,
            "description": "The collection that holds the models that this list view will track",
            "itemtype": "property",
            "name": "collection",
            "type": "Collection",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 157,
            "description": "The item view class definition that will be instantiated for each model in the list.\nitemView can also be a function that takes a model and returns a view class. This allows\nfor different view classes depending on the model.",
            "itemtype": "property",
            "name": "itemView",
            "type": "View or Function",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 165,
            "description": "The template that allows a list view to hold it's own HTML like filter buttons, etc.",
            "itemtype": "property",
            "name": "template",
            "type": "HTML Template",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 171,
            "description": "If provided, this template that will be shown if the modelsToRender() method returns\nan empty list. If an itemContainer is provided, the empty template will be rendered there.",
            "itemtype": "property",
            "name": "emptyTemplate",
            "type": "HTML Template",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 178,
            "description": "(Required if 'template' is provided, ignored otherwise) name of injection site for list of item views",
            "itemtype": "property",
            "name": "itemContainer",
            "type": "String",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 190,
            "itemtype": "property",
            "name": "__delayedRenderTimeout",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 197,
            "description": "Constructor for the list view object.",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "args",
                    "description": "- options argument",
                    "type": "Object",
                    "props": [
                        {
                            "name": "itemView",
                            "description": "- the class definition of the item view. This view will be instantiated for every model returned by modelsToRender(). If a function is passed in, then for each model, this function will be invoked to find the appropriate view class. It takes the model as the only parameter.",
                            "type": "Backbone.View definition or Function"
                        },
                        {
                            "name": "collection",
                            "description": "- The collection that will back this list view. A subclass of list view might provide a default collection. Can be private or public collection",
                            "type": "Backbone.Collection instance"
                        },
                        {
                            "name": "itemContext",
                            "description": "- object or function that's passed to the item view's during initialization under the name \"context\". Can be used by the item view during their prepare method.",
                            "type": "Object or Function",
                            "optional": true
                        },
                        {
                            "name": "template",
                            "description": "- allows a list view to hold it's own HTML like filter buttons, etc.",
                            "type": "HTML Template",
                            "optional": true
                        },
                        {
                            "name": "itemContainer",
                            "description": "- (Required if 'template' is provided, ignored otherwise) name of injection site for list of item views",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "emptyTemplate",
                            "description": "- if provided, this template will be shown if the modelsToRender() method returns an empty list. If a itemContainer is provided, the empty template will be rendered there.",
                            "type": "HTML Template",
                            "optional": true
                        },
                        {
                            "name": "modelsToRender",
                            "description": "- If provided, this function will override the modelsToRender() method with custom functionality.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "renderWait",
                            "description": "- If provided, will collect any internally invoked renders (typically through collection events like reset) for a duration specified by renderWait in milliseconds and then calls a single render instead. Helps to remove unnecessary render calls when modifying the collection often.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "modelId",
                            "description": "- model property used as identifier for a given model. This property is saved and used to find the corresponding view.",
                            "type": "'cid' or 'id'",
                            "optional": true,
                            "optdefault": "'cid'"
                        },
                        {
                            "name": "modelName",
                            "description": "- name of the model argument passed to the item view during initialization",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'model'"
                        }
                    ]
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 241,
            "description": "Sets the collection from which this view generates item views.\nThis method will attach all necessary event listeners to the new collection to auto-generate item views\nand has the option of removing listeners on a previous collection. It will immediately update child\nviews and re-render if it is necessary - this behavior can be prevented with preventUpdate argument",
            "itemtype": "method",
            "name": "setCollection",
            "params": [
                {
                    "name": "collection",
                    "description": "the new collection that this list view should use.",
                    "type": "Backbone.Collection instance"
                },
                {
                    "name": "preventUpdate",
                    "description": "if true, the list view will not update the child views nor rerender.",
                    "type": "Boolean"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 269,
            "description": "Override of View.__updateDOM\nBuilds a single DOM fragment from the item views and attaches it at once.",
            "itemtype": "method",
            "name": "__updateDOM",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 292,
            "description": "Completes each item view's lifecycle of being attached to a parent.\nBecause the item views are attached in a non-standard way, it's important to make sure\nthat the item views are in the appropriate state after being attached as one fragment.",
            "itemtype": "method",
            "name": "__cleanupItemViewsAfterAttachedToParent",
            "access": "private",
            "tagname": "",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 314,
            "description": "Loops through children views and renders them",
            "itemtype": "method",
            "name": "renderChildViews",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 324,
            "description": "Takes existing item views and moves them into correct order defined by\nthis.modelsToRender(). NOTE: As this method doesn't generate or remove views,\nthis method takes advantage of jquery's ability to move elements already attached to the DOM.",
            "itemtype": "method",
            "name": "reorder",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 374,
            "description": "Override if you want a different context for your empty template. Defaults to this.prepare()",
            "itemtype": "method",
            "name": "prepareEmpty",
            "return": {
                "description": "a context that can be used by the empty list template"
            },
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 383,
            "description": "Returns an array of which models should be rendered.\nBy default, all models in the input collection will be\nshown.  Extensions of this class may override this\nmethod to apply collection filters.",
            "itemtype": "method",
            "name": "modelsToRender",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 394,
            "description": "Builds any new views, removes stale ones, and re-renders",
            "itemtype": "method",
            "name": "update",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 425,
            "description": "Returns the view that corresponds to the model if one exists",
            "params": [
                {
                    "name": "model",
                    "description": "the model",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "the item view corresponding to the model"
            },
            "itemtype": "method",
            "name": "getItemViewFromModel",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 435,
            "return": {
                "description": "returns true if there exists any generated item views",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasItemViews",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 443,
            "return": {
                "description": "Returns unordered list of views generated by this list view",
                "type": "Array of views"
            },
            "itemtype": "method",
            "name": "getItemViews",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 455,
            "description": "Creates all needed item views that don't exist from modelsToRender()",
            "itemtype": "method",
            "name": "__createItemViews",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "each object in array contains a 'view' and 'indexOfModel' field",
                "type": "Array"
            },
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 476,
            "description": "Creates an item view and stores a reference to it",
            "itemtype": "method",
            "name": "__createItemView",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "model",
                    "description": "the model to create the view from",
                    "type": "Backbone Model"
                },
                {
                    "name": "noUpdateToIdList",
                    "description": "if true, the internal order of model ids are not updated",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "the new item view",
                "type": "Backbone View"
            },
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 501,
            "description": "Gets all item views that have models that are no longer tracked by modelsToRender",
            "itemtype": "method",
            "name": "__getStaleItemViews",
            "return": {
                "description": "An array of information about stale items. Each object has a 'view' and 'modelId' field",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 525,
            "description": "Removes the item views that no longer have models returned by modelsToRender()",
            "itemtype": "method",
            "name": "__removeStaleItemViews",
            "params": [
                {
                    "name": "staleItemViewInfo]",
                    "description": "} If provided, stale items will not be found, but this array will be used instead.",
                    "type": "Array of objects:!~YUIDOC_LINE~!  [!~YUIDOC_LINE~!    view: stale item view,!~YUIDOC_LINE~!    modelId: id of model item!~YUIDOC_LINE~!",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 543,
            "description": "Creates a DOM fragment with each item view appended in the order defined by\nmodelsToRender(). This will clear the List View's DOM and invoke the necessary\ndetach, register and render logic on each item view.",
            "return": {
                "description": "a DOM fragment with item view elements appended"
            },
            "itemtype": "method",
            "name": "__emptyAndRebuildItemViewsFragment",
            "access": "private",
            "tagname": "",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 574,
            "description": "Attempts to insert new views and remove stale views individually and correctly reorder all views in an\nattempt to be faster then a full view re-render",
            "itemtype": "method",
            "name": "__updateByAddingRemoving",
            "params": [
                {
                    "name": "oldViews",
                    "description": "- correctly ordered list of views before making changes to models to render",
                    "type": "Array of Views"
                },
                {
                    "name": "newViews",
                    "description": "- the new views created that will be inserted",
                    "type": "Array of Views"
                },
                {
                    "name": "staleViews",
                    "description": "- the stale views that will be removed",
                    "type": "Array of Views"
                }
            ],
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 625,
            "description": "Updates the internal list of model ids that correspond to the models used for the current\nlist of item views. The order is the same order of the item views.",
            "itemtype": "method",
            "name": "__updateOrderedModelIdList",
            "params": [
                {
                    "name": "newIdsList",
                    "description": "- if passed the array, it will use that instead of finding the list.",
                    "type": "Array of ids",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 636,
            "description": "Method to generate arguments when creating an item view. Override this method\nto change the arguments for a given item view.\nThe format of the subview's arguments is:\n{\n  context: {\n    ... inherited from parent ...\n  },\n  <modelName>: <modelObject>,\n  listView: the parent list view\n}",
            "itemtype": "method",
            "name": "__generateItemViewArgs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "model",
                    "description": "the model for an item view"
                }
            ],
            "return": {
                "description": "a context to be used by an item view"
            },
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 661,
            "description": "Alias method for __generateItemViewArgs()",
            "itemtype": "method",
            "name": "__generateChildArgs",
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/ListView.js",
            "line": 669,
            "itemtype": "method",
            "name": "__getViewIdFromModelId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelId",
                    "description": "id of model",
                    "type": "String or Number"
                }
            ],
            "return": {
                "description": "view cid that was built from corresponding model",
                "type": "String or Number"
            },
            "class": "ListView",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 15,
            "description": "ViewStateCell is a NestedCell that holds view state data and can trigger\nchange events. These changes events will propogate up and trigger on the view\nas well.",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 27,
            "description": "Retrigger view state change events on the view as well.",
            "itemtype": "method",
            "name": "trigger",
            "override": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 70,
            "description": "Array of feedback when-then-to's. Example:\n[{\n  when: {'@fullName': ['change']},\n  then: function(event) { return {text: this.feedbackCell.get('fullName')};},\n  to: 'fullName-feedback'\n}]",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "feedback",
            "type": "Array",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 82,
            "description": "Overrides constructor to create needed fields and invoke activate/render after initialization",
            "itemtype": "method",
            "name": "constructor",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 106,
            "description": "Alias to this.viewState.get()",
            "itemtype": "method",
            "name": "get",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 114,
            "description": "Alias to this.viewState.set()",
            "itemtype": "method",
            "name": "set",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 122,
            "description": "Alias to this.viewState.has()",
            "itemtype": "method",
            "name": "has",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 130,
            "description": "Alias to this.viewState.unset()",
            "itemtype": "method",
            "name": "unset",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 138,
            "description": "Alias to this.viewState.toJSON()",
            "itemtype": "method",
            "name": "toJSON",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 146,
            "params": [
                {
                    "name": "alias",
                    "description": "the name/alias of the behavior",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the behavior instance if one exists with that alias",
                "type": "Torso.Behavior"
            },
            "itemtype": "method",
            "name": "getBehavior",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 157,
            "description": "prepareFields can be used to augment the default render method contents.\nSee __getPrepareFieldsContext() for more details on how to configure them.",
            "return": {
                "description": "context for a render method. Defaults to:\n   {view: this.viewState.toJSON(), model: this.model.toJSON()}",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "prepare",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 169,
            "description": "Augments the context with custom content.",
            "params": [
                {
                    "name": "context",
                    "description": "the context you can modify",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[Optional] If you return an object, it will be merged with the context",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "_prepare",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 179,
            "description": "Rebuilds the html for this view's element. Should be able to be called at any time.\nDefaults to using this.templateRender. Assumes that this.template is a javascript\nfunction that accepted a single JSON context.\nThe render method returns a promise that resolves when rendering is complete. Typically render\nis synchronous and the rendering is complete upon completion of the method. However, when utilizing\ntransitions/animations, the render process can be asynchronous and the promise is useful to know when it has finished.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "a promise that when resolved signifies that the rendering process is complete.",
                "type": "Promise"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 221,
            "description": "Hook during render that is invoked before any DOM rendering is performed.\nThis method can be overwritten as usual OR extended using <baseClass>.prototype.prerender.apply(this, arguments);\nNOTE: if you require the view to be detached from the DOM, consider using _detach callback",
            "itemtype": "method",
            "name": "prerender",
            "return": {
                "description": "you can optionally return one or more promises that when all are resolved, prerender is finished. Note: render logic will not wait until promises are resolved.",
                "type": "Promise or List of Promises"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 230,
            "description": "Produces and sets this view's elements DOM. Used during the rendering process. Override if you have custom DOM update logic.\nDefaults to using the stanrdard: this.templateRender(this.$el, this.template, this.prepare(), templateRendererOptions);\nthis.templateRendererOptions is an object or function defined on the view that is passed into the renderer.\nExamples include: views with no template or multiple templates, or if you wish to use a different rendering engine than the templateRenderer or wish to pass options to it.",
            "itemtype": "method",
            "name": "updateDOM",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 244,
            "description": "Hook during render that is invoked after all DOM rendering is done and tracked views attached.\nThis method can be overwritten as usual OR extended using <baseClass>.prototype.postrender.apply(this, arguments);\nNOTE: if you require the view to be attached to the DOM, consider using _attach callback",
            "itemtype": "method",
            "name": "postrender",
            "return": {
                "description": "you can optionally return one or more promises that when all are resolved, postrender is finished. Note: render logic will not wait until promises are resolved.",
                "type": "Promise or List of Promises"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 253,
            "description": "Hotswap rendering system reroute method.",
            "itemtype": "method",
            "name": "templateRender\nSee Torso.templateRenderer#render for params",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 266,
            "description": "Overrides the base delegateEvents\nBinds DOM events with the view using events hash while also adding feedback event bindings",
            "itemtype": "method",
            "name": "delegateEvents",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 283,
            "description": "Overrides undelegateEvents\nUnbinds DOM events from the view.",
            "itemtype": "method",
            "name": "undelegateEvents",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 295,
            "description": "If detached, will replace the element passed in with this view's element and activate the view.",
            "params": [
                {
                    "name": "$el",
                    "description": "the element to attach to. This element will be replaced with this view.\n                              If options.replaceMethod is provided, then this parameter is ignored.",
                    "type": "JQuery element",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "optional options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "replaceMethod",
                            "description": "if given, this view will invoke replaceMethod function\n                                            in order to attach the view's DOM to the parent instead of calling $el.replaceWith",
                            "type": "Fucntion",
                            "optional": true
                        },
                        {
                            "name": "discardInjectionSite",
                            "description": "if set to true, the injection site is not saved.",
                            "type": "Booleon",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "promise that when resolved, the attach process is complete. Normally this method is synchronous. Transition effects can\n                  make it asynchronous.",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "attachTo",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 325,
            "description": "Registers the view as a tracked view (defaulting as a child view), then calls view.attachTo with the element argument\nThe element argument can be a String that references an element with the corresponding \"inject\" attribute.\nWhen using attachView with options.useTransition:\n  Will inject a new view into an injection site by using the new view's transitionIn method. If the parent view\n  previously had another view at this injections site, this previous view will be removed with that view's transitionOut.\n  If this method is used within a render, the current views' injection sites will be cached so they can be transitioned out even\n  though they are detached in the process of re-rendering. If no previous view is given and none can be found, the new view is transitioned in regardless.\n  If the previous view is the same as the new view, it is injected normally without transitioning in.\n  The previous view must has used an injection site with the standard \"inject=<name of injection site>\" attribute to be found.\n  When the transitionIn and transitionOut methods are invoked on the new and previous views, the options parameter will be passed on to them. Other fields\n  will be added to the options parameter to allow better handling of the transitions. These include:\n  {\n    newView: the new view\n    previousView: the previous view (can be undefined)\n    parentView: the parent view transitioning in or out the tracked view\n  }",
            "params": [
                {
                    "name": "$el",
                    "description": "the element to attach to OR the name of the injection site. The element with the attribute \"inject=<name of injection site>\" will be used.",
                    "type": "JQuery element or String"
                },
                {
                    "name": "view",
                    "description": "The instantiated view object to be attached",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "optionals options object. If using transitions, this options object will be passed on to the transitionIn and transitionOut methods as well.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "noActivate",
                            "description": "if set to true, the view will not be activated upon attaching.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "shared",
                            "description": "if set to true, the view will be treated as a shared view and not disposed during parent view disposing.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "useTransition",
                            "description": "if set to true, this method will delegate attach logic to this.__transitionNewViewIntoSite",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "addBefore",
                            "description": "if true, and options.useTransition is true, the new view's element will be added before the previous view's element. Defaults to after.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "previousView",
                            "description": "if using options.useTransition, then you can explicitly define the view that should be transitioned out.\n                                       If using transitions and no previousView is provided, it will look to see if a view already is at this injection site and uses that by default.",
                            "type": "View",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "resolved when all transitions are complete. No payload is provided upon resolution. If no transitions, then returns a resolved promise.",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "attachView",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 379,
            "description": "Hook to attach all your tracked views. This hook will be called after all DOM rendering is done so injection sites should be available.\nThis method can be overwritten as usual OR extended using <baseClass>.prototype.attachTrackedViews.apply(this, arguments);",
            "itemtype": "method",
            "name": "attachTrackedViews",
            "return": {
                "description": "you can optionally return one or more promises that when all are resolved, all tracked views are attached. Useful when using this.attachView with useTransition=true.",
                "type": "Promise or List of Promises"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 387,
            "description": "Method to be invoked when the view is fully attached to the DOM (NOT just the parent). Use this method to manipulate the view\nafter the DOM has been attached to the document. The default implementation is a no-op.",
            "itemtype": "method",
            "name": "_attached",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 394,
            "return": {
                "description": "true if the view is attached to a parent",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isAttachedToParent",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 402,
            "description": "NOTE: depends on a global variable \"document\"",
            "return": {
                "description": "true if the view is attached to the DOM",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isAttached",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 411,
            "description": "If attached, will detach the view from the DOM.\nThis method will only separate this view from the DOM it was attached to, but it WILL invoke the _detach\ncallback on each tracked view recursively.",
            "itemtype": "method",
            "name": "detach",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 437,
            "description": "Detach all tracked views or a subset of them based on the options parameter.\nNOTE: this is not recursive - it will not separate the entire view tree.",
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, detach only the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, detach only child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "detachTrackedViews",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 453,
            "description": "Method to be invoked when the view is detached from the DOM (NOT just the parent). Use this method to clean up state\nafter the view has been removed from the document. The default implementation is a no-op.",
            "itemtype": "method",
            "name": "_detached",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 460,
            "description": "Resets listeners and events in order for the view to be reattached to the visible DOM",
            "itemtype": "method",
            "name": "activate",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 473,
            "description": "Method to be invoked when activate is called. Use this method to turn on any\ncustom timers, listenTo's or on's that should be activatable. The default implementation is a no-op.",
            "itemtype": "method",
            "name": "_activate",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 480,
            "return": {
                "description": "true if the view is active",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isActive",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 488,
            "description": "Maintains view state and DOM but prevents view from becoming a zombie by removing listeners\nand events that may affect user experience. Recursively invokes deactivate on child views",
            "itemtype": "method",
            "name": "deactivate",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 502,
            "description": "Method to be invoked when deactivate is called. Use this method to turn off any\ncustom timers, listenTo's or on's that should be deactivatable. The default implementation is a no-op.",
            "itemtype": "method",
            "name": "_deactivate",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 509,
            "description": "Removes all listeners, disposes children views, stops listening to events, removes DOM.\nAfter dispose is called, the view can be safely garbage collected. Called while\nrecursively removing views from the hierarchy.",
            "itemtype": "method",
            "name": "dispose",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 547,
            "description": "Method to be invoked when dispose is called. By default calling dispose will remove the\nview's element, its on's, listenTo's, and any registered children.\nOverride this method to destruct any extra",
            "itemtype": "method",
            "name": "_dispose",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 555,
            "return": {
                "description": "true if the view was disposed",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isDisposed",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 563,
            "return": {
                "description": "true if this view has tracked views (limited by the options parameter)",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, only check the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, only check the child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "hasTrackedViews",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 575,
            "description": "Returns all tracked views, both child views and shared views.",
            "itemtype": "method",
            "name": "getTrackedViews",
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, get only the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, get only child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "all tracked views (filtered by options parameter)",
                "type": "List<View>"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 588,
            "return": {
                "description": "the view with the given cid.  Will look in both shared and child views."
            },
            "params": [
                {
                    "name": "viewCID",
                    "description": "the cid of the view",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getTrackedView",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 599,
            "description": "Binds the view as a tracked view - any recursive calls like activate, deactivate, or dispose will\nbe done to the tracked view as well.  Except dispose for shared views. This method defaults to register the\nview as a child view unless specified by options.shared.",
            "params": [
                {
                    "name": "view",
                    "description": "the tracked view",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, registers view as a shared view. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed. If false, registers view as a child view which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the tracked view",
                "type": "View"
            },
            "itemtype": "method",
            "name": "registerTrackedView",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 621,
            "description": "Unbinds the tracked view - no recursive calls will be made to this shared view",
            "params": [
                {
                    "name": "view",
                    "description": "the shared view",
                    "type": "View"
                }
            ],
            "return": {
                "description": "the tracked view",
                "type": "View"
            },
            "itemtype": "method",
            "name": "unregisterTrackedView",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 633,
            "description": "Unbinds all tracked view - no recursive calls will be made to this shared view\nYou can limit the types of views that will be unregistered by using the options parameter.",
            "params": [
                {
                    "name": "view",
                    "description": "the shared view",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, unregister only the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, unregister only child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the tracked view",
                "type": "View"
            },
            "itemtype": "method",
            "name": "unregisterTrackedView",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 651,
            "description": "Override to provide your own transition out logic. Default logic is to just detach from the page.\nThe method is passed a callback that should be invoked when the transition out has fully completed.",
            "itemtype": "method",
            "name": "transitionOut",
            "params": [
                {
                    "name": "done",
                    "description": "callback that MUST be invoked when the transition is complete.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "optionals options object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "currentView",
                            "description": "the view that is being transitioned in.",
                            "type": "View"
                        },
                        {
                            "name": "previousView",
                            "description": "the view that is being transitioned out. Typically this view.",
                            "type": "View"
                        },
                        {
                            "name": "parentView",
                            "description": "the view that is invoking the transition.",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 666,
            "description": "Override to provide your own transition in logic. Default logic is to just attach to the page.\nThe method is passed a callback that should be invoked when the transition in has fully completed.",
            "itemtype": "method",
            "name": "transitionIn",
            "params": [
                {
                    "name": "attach",
                    "description": "callback to be invoked when you want this view to be attached to the dom.\n                               If you are trying to transition in a tracked view, consider using this.transitionInView()",
                    "type": "Function"
                },
                {
                    "name": "done",
                    "description": "callback that MUST be invoked when the transition is complete.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "optionals options object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "currentView",
                            "description": "the view that is being transitioned in.",
                            "type": "View"
                        },
                        {
                            "name": "previousView",
                            "description": "the view that is being transitioned out. Typically this view.",
                            "type": "View"
                        },
                        {
                            "name": "parentView",
                            "description": "the view that is invoking the transition.",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 683,
            "description": "Invokes a feedback entry's \"then\" method",
            "params": [
                {
                    "name": "to",
                    "description": "the \"to\" field corresponding to the feedback entry to be invoked.",
                    "type": "String"
                },
                {
                    "name": "evt",
                    "description": "the event to be passed to the \"then\" method",
                    "type": "Event",
                    "optional": true
                },
                {
                    "name": "indexMap",
                    "description": "a map from index variable name to index value. Needed for \"to\" fields with array notation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "invokeFeedback",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 712,
            "description": "Attaches views using this.injectionSites. The API for injectionSites looks like:\ninjectionSites: {\n  foo: fooView,  // foo is injectionSite, fooView is the view\n        bar: 'barView',  // bar is injectionSite, 'barView' is a field on the view (view.barView)\n        baz: function() {  // baz is injectionSite\n          return this.bazView;  // the context 'this' is the view\n        },\n        taz: {  // if you want to pass in options, use a config object with 'view' and 'options'\n          view: (same as the three above: direct reference, string of view field, or function that return view),\n          options: {} // optional options\n        }\n}\nTo create dynamic show/hide logic, perform the logic in a function that returns the correct view, or you can\ncall this.set('hide:foo', true) or this.set('hide:foo', false)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__attachViewsFromInjectionSites",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 761,
            "description": "Parses the combined arrays from the defaultPrepareFields array and the prepareFields array (or function\nreturning an array).\n\nThe default prepared fields are: [ { name: 'view', value: 'viewState' }, 'model' ]\n\nPrepared fields can be defined in a couple of ways:\n  preparedFields = [\n    'model',\n    { name: 'app', value: someGlobalCell },\n    'a value that does not exist on the view',\n    { name: 'view', value: 'viewState' },\n    { name: 'patientId', value: '_patientId' },\n    { name: 'calculatedValue', value: function() { return 'calculated: ' + this.viewProperty },\n    'objectWithoutToJSON'\n  ]\n\nWill result in the following context (where this === this view and it assumes all the properties on the view\nthat are referenced are defined):\n  {\n    model: this.model.toJSON(),\n    app: someGlobalCell.toJSON(),\n    view: this.viewState.toJSON(),\n    patientId: this._patientId,\n    calculatedValue: 'calculated: ' + this.viewProperty,\n    objectWithoutToJSON: this.objectWithoutToJSON\n  }\n\nNote: alternatively, you can define your prepareFields as an object that will be mapped to an array of { name: key, value: value }\n\nThings to be careful of:\n  * If the view already has a field named 'someGlobalCell' then the property on the view will be used instead of the global value.\n  * if the prepared field item is not a string or object containing 'name' and 'value' properties, then an exception\n    will be thrown.\n  * 'model' and 'view' are reserved field names and cannot be reused.",
            "itemtype": "method",
            "name": "__getPrepareFieldsContext",
            "return": {
                "description": "context composed of { modelName: model.toJSON() } for every model identified.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 864,
            "description": "Initializes the behaviors",
            "itemtype": "method",
            "name": "__initializeBehaviors",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 908,
            "description": "If the view is attaching during the render process, then it replaces the injection site\nwith the view's element after the view has generated its DOM.",
            "itemtype": "method",
            "name": "__performPendingAttach",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 920,
            "description": "Deactivates all tracked views or a subset of them based on the options parameter.",
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, deactivate only the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, deactivate only child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "__deactivateTrackedViews",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 935,
            "description": "Activates all tracked views or a subset of them based on the options parameter.",
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, activate only the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, activate only child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "__activateTrackedViews",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 950,
            "description": "Disposes all child views recursively",
            "itemtype": "method",
            "name": "disposeChildViews",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 961,
            "description": "Will inject a new view into an injection site by using the new view's transitionIn method. If the parent view\npreviously had another view at this injections site, this previous view will be removed with that view's transitionOut.\nIf this method is used within a render, the current views' injection sites will be cached so they can be transitioned out even\nthough they are detached in the process of re-rendering. If no previous view is given and none can be found, the new view is transitioned in regardless.\nIf the previous view is the same as the new view, it is injected normally without transitioning in.\nThe previous view must has used an injection site with the standard \"inject=<name of injection site>\" attribute to be found.",
            "itemtype": "method",
            "name": "transitionNewViewIntoSite",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "injectionSiteName",
                    "description": "The name of the injection site in the template. This is the value corresponding to the attribute \"inject\".",
                    "type": "String"
                },
                {
                    "name": "newView",
                    "description": "The instantiated view object to be transitioned into the injection site",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "optional options object. This options object will be passed on to the transitionIn and transitionOut methods as well.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "previousView",
                            "description": "the view that should be transitioned out. If none is provided, it will look to see if a view already\n                                is at this injection site and uses that by default.",
                            "type": "View",
                            "optional": true
                        },
                        {
                            "name": "addBefore",
                            "description": "if true, the new view's element will be added before the previous view's element. Defaults to after.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "shared",
                            "description": "if set to true, the view will be treated as a shared view and not disposed during parent view disposing.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "resolved when all transitions are complete. No payload is provided upon resolution.\nWhen the transitionIn and transitionOut methods are invoked on the new and previous views, the options parameter will be passed on to them. Other fields\nwill be added to the options parameter to allow better handling of the transitions. These include:\n{\n  newView: the new view\n  previousView: the previous view (can be undefined)\n  parentView: the parent view transitioning in or out the tracked view\n}",
                "type": "Promise"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1012,
            "description": "Will transition out previousView at the same time as transitioning in newView.",
            "itemtype": "method",
            "name": "__performTwoWayTransition",
            "params": [
                {
                    "name": "injectionSiteName",
                    "description": "The name of the injection site in the template. This is the value corresponding to the attribute \"inject\".",
                    "type": "String"
                },
                {
                    "name": "previousView",
                    "description": "the view that should be transitioned out.",
                    "type": "View"
                },
                {
                    "name": "newView",
                    "description": "The view that should be transitioned into the injection site",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "optional options object. This options object will be passed on to the transitionIn and transitionOut methods as well.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "addBefore",
                            "description": "if true, the new view's element will be added before the previous view's element. Defaults to after.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "resolved when all transitions are complete. No payload is provided upon resolution.",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1047,
            "description": "Simliar to this.attachView except it utilizes the new view's transitionIn method instead of just attaching the view.\nThis method is invoked on the parent view to attach a tracked view where the transitionIn method defines how a tracked view is brought onto the page.",
            "params": [
                {
                    "name": "$el",
                    "description": "the element to attach to.",
                    "type": "JQuery element"
                },
                {
                    "name": "newView",
                    "description": "the view to be transitioned in.",
                    "type": "View"
                },
                {
                    "name": "options",
                    "description": "optional options object",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "noActivate",
                            "description": "if set to true, the view will not be activated upon attaching.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "shared",
                            "description": "if set to true, the view will be treated as a shared view and not disposed during parent view disposing.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "resolved when transition is complete. No payload is provided upon resolution.",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "transitionInView",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1073,
            "description": "Gets the hash from id to tracked views. You can limit the subset of views returned based on the options passed in.\nNOTE: returns READ-ONLY snapshots. Updates to the returned cid->view map will not be saved nor will updates to the underlying maps be reflected later in returned objects.\nThis means that you can add \"add\" or \"remove\" tracked view using this method, however you can interact with the views inside the map completely.",
            "params": [
                {
                    "name": "options",
                    "description": "{Object}  Optional options.",
                    "optional": true,
                    "props": [
                        {
                            "name": "shared",
                            "description": "If true, will add the shared views. These are views not owned by this parent. As compared to a child view\n                                          which are disposed when the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "child",
                            "description": "If true, will add child views. These are views that are owned by the parent and dispose of them if the parent is disposed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "__getTrackedViewsHash",
            "return": {
                "description": "READ-ONLY snapshot of the object maps cotaining tracked views keyed by their cid (filtered by optional options parameter)."
            },
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1100,
            "description": "Used internally by Torso.View to keep a cache of tracked views and their current injection sites before detaching during render logic.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__updateInjectionSiteMap",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1117,
            "description": "Replaces the injection site element passed in using $el.replaceWith OR you can use your own replace method",
            "itemtype": "method",
            "name": "__replaceInjectionSite",
            "params": [
                {
                    "name": "$el",
                    "description": "the injection site element to be replaced",
                    "type": "JQuery Element"
                },
                {
                    "name": "options",
                    "description": "Optional options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "replaceMethod",
                            "description": "use an alternative replace method. Invoked with the view's element as the argument.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "discardInjectionSite",
                            "description": "if true, the view will not save a reference to the injection site after replacement.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1134,
            "description": "Call this method when a view is attached to the DOM. It is recursive to child views, but checks whether each child view is attached.",
            "itemtype": "method",
            "name": "__invokeAttached",
            "access": "private",
            "tagname": "",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1153,
            "description": "Call this method when a view is detached from the DOM. It is recursive to child views.",
            "itemtype": "method",
            "name": "__invokeDetached",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1171,
            "description": "Generates callbacks for changes in feedback cell fields\n'change fullName' -> invokes all the jQuery (or $) methods on the element as stored by the feedback cell\nIf feedbackCell.get('fullName') returns:\n{ text: 'my text',\n  attr: {class: 'newClass'}\n  hide: [100, function() {...}]\n...}\nThen it will invoke $element.text('my text'), $element.attr({class: 'newClass'}), etc.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateFeedbackCellCallbacks",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1218,
            "description": "Processes the result of the then method. Adds to the feedback cell.",
            "params": [
                {
                    "name": "result",
                    "description": "the result of the then method",
                    "type": "Object"
                },
                {
                    "name": "feedbackCellField",
                    "description": "the name of the feedbackCellField, typically the \"to\" value.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__processFeedbackThenResult",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1231,
            "description": "Creates the \"when\" bindings, and collates and invokes the \"then\" methods for all feedbacks\nFinds all feedback zones that match the \"to\" field, and binds the \"when\" events to invoke the \"then\" method",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateFeedbackBindings",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1340,
            "description": "Returns a properly wrapped \"then\" using a configuration object \"bindInfo\" and an \"eventKey\" that will be passed as the type",
            "params": [
                {
                    "name": "bindInfo",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "feedbackCellField",
                            "description": "the property name of the feedback cell to store the \"then\" instructions"
                        },
                        {
                            "name": "fn",
                            "description": "the original \"then\" function"
                        },
                        {
                            "name": "indices",
                            "description": "the index map",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "the properly wrapped \"then\" function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateThenCallback",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1363,
            "description": "Returns all elements on the page that match the feedback mapping\nIf dest is: my-feedback-foo[x][y] then it will find all elements that match: data-feedback=\"my-feedback-foo[*][*]\"",
            "params": [
                {
                    "name": "dest",
                    "description": "the string of the data-feedback",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all elements on the page that match the feedback mapping",
                "type": "JQuery array"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__getFeedbackDestinations",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1386,
            "description": "Generates the events needed to listen to the feedback's when methods. A when event is only created\nif the appropriate element exist on the page",
            "params": [
                {
                    "name": "whenMap",
                    "description": "the collection of \"when\"'s for a given feedback"
                },
                {
                    "name": "indexMap",
                    "description": "map from variable names to values when substituting array notation"
                }
            ],
            "return": {
                "description": "the events that were generated"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__generateWhenEvents",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1426,
            "description": "Returns an array of all the values and variables used within the array notations in a string\nExample: foo.bar[x].baz[0][1].taz[y] will return ['x', 0, 1, 'y']. It will parse integers if they are numbers\nThis does not handle or return any \"open\" array notations: []",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__getAllIndexTokens",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1445,
            "description": "Replaces all array notations with open array notations.\nExample: foo.bar[x].baz[0][1].taz[y] will return as foo.bar[].baz[][].taz[]",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__stripAllAttribute",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1458,
            "description": "Takes a map from variable name to value to be replaced and processes a string with them.\nExample: foo.bar[x].baz[0][1].taz[y] and {x: 5, y: 9} will return as foo.bar[5].baz[0][1].taz[9]\nAlso supports objects:\nExample: foo.bar and {bar: someString} will return as foo.someString",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "__substituteIndicesUsingMap",
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/View.js",
            "line": 1482,
            "description": "Generates an array of all the possible field accessors and their indices when using\nthe \"open\" array notation:\n   foo[] -> ['foo[0]', 'foo[1]'].\nWill also perform nested arrays:\n   foo[][] -> ['foo[0][0]', foo[1][0]']\nSupports both foo[x] and foo.bar",
            "itemtype": "method",
            "name": "__generateSubAttributes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attr",
                    "description": "The name of the attribute to expand according to the bound model",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The fully expanded subattribute names",
                "type": "Array<String>"
            },
            "class": "View",
            "module": "Torso"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 28,
            "description": "Usage: {{labelFor 'fieldName' value=\"suffix\"}}\nGenerates: for=\"field-name-suffix\"\nUsage: {{labelFor 'fieldName[x].sub' value=\"demo\" x=123}}\nGenerates: for=\"field-name-123_sub-demo\"\nUsage: {{labelFor 'fieldName[bar].sub' value=\"demo\" bar=\"abc\"}}\nGenerates: for=\"field-name_abc_sub-demo\"",
            "itemtype": "method",
            "name": "Handlebars.helpers.labelFor",
            "params": [
                {
                    "name": "field",
                    "description": "The field name to convert to a compliant \"for\" attribute",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Always passed in as final argument",
                    "type": "<Handlebars context>"
                },
                {
                    "name": "option.hash.value",
                    "description": "The value tacked on to the end of the field string (useful for radio and checkbox)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Compliant HTML generating the \"for\" attribute",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 46,
            "description": "Usage: {{bindModel 'fieldName' value='suffix'}}\nGenerates: id=\"field-name-suffix\" name=\"field-name\" data-model=\"fieldName\" data-feedback=\"fieldName\" value=\"demo\"\nUsage: {{bindModel 'fieldName[x].sub' value='demo' x=123}}\nGenerates: data-model=\"fieldName[123].sub\" data-feedback=\"fieldName[123].sub\" name=\"field-name-123_sub\"\n           id=\"field-name-123_sub-demo\" value=\"demo\"\nUsage: {{bindModel 'fieldName[bar].sub' value='demo' bar='abc'}}\nGenerates: data-model=\"fieldName.abc.sub\" data-feedback=\"fieldName[abc].sub\" name=\"field-name_abc_sub\"\n                 id=\"field-name_abc_sub-demo\" value=\"demo\"",
            "itemtype": "method",
            "name": "Handlebars.helpers.bindModel",
            "params": [
                {
                    "name": "field",
                    "description": "The field name to convert to compliant id, name, data-model, and data-feedback attributes",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Always passed in as final argument",
                    "type": "<Handlebars context>",
                    "props": [
                        {
                            "name": "hash.value",
                            "description": "The value tacked on to the end of the field string (useful for radio and checkbox)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Compliant HTML generating the id, name, data-model, and data-feedback attributes",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 65,
            "description": "Usage: {{feedback 'fieldName'}}\nGenerates: data-feedback=\"fieldName\"\nUsage: {{feedback 'fieldName[x].sub' value='demo' x=123}}\nGenerates: data-feedback=\"fieldName[123].sub\"\nUsage: {{feedback 'fieldName[bar].sub value='demo' bar='abc'}}\nGenerates: data-feedback=\"fieldName[abc].sub\"",
            "itemtype": "method",
            "name": "Handlebars.helpers.feedback",
            "params": [
                {
                    "name": "field",
                    "description": "The field name to convert to a compliant data-feedback attribute",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Always passed in as final argument",
                    "type": "<Handlebars context>"
                }
            ],
            "return": {
                "description": "Compliant HTML generating the data-feedback attribute",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 82,
            "description": "Usage: {{formAttr 'fieldName[x].sub' 'id, for' value='demo' x=123}}\nGenerates: id=\"field-name-123_sub-demo\" for=\"field-name-123_sub-demo\" value=\"demo\"\nUsage: {{feedback 'fieldName[bar].sub value='demo' bar='abc'}}\nGenerates: id=\"field-name_abc_sub-demo\" for=\"field-name_abc_sub-demo\" value=\"demo\"",
            "itemtype": "method",
            "name": "Handlebars.helpers.formAttr",
            "params": [
                {
                    "name": "field",
                    "description": "The field name to convert to a compliant data-feedback attribute",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Always passed in as final argument",
                    "type": "<Handlebars context>",
                    "props": [
                        {
                            "name": "hash.value",
                            "description": "The value tacked on to the end of the field string (useful for radio and checkbox)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "noValueAttr",
                            "description": "when options.noValueAttr is set to true,\n                                             then it will not generate the \"value\" attribute in the DOM.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Compliant HTML generating the data-feedback attribute",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 132,
            "description": "Usage: {{feedback 'fieldName[x].sub'}}\nGenerates: field-name[x]_sub",
            "itemtype": "method",
            "name": "Handlebars.helpers.dasherize",
            "params": [
                {
                    "name": "str",
                    "description": "The input string to make HTML compliant (convert to dashes)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML complicant / dasherized string",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/handlebarsUtils.js",
            "line": 153,
            "description": "Usage: injectFieldIndices('test[x]-thisIsRegular-y', {x: 123, y: 456} and 'foo[x].abc', x='bar');\nGenerates: 'test[123]-thisIsRegular-y' and 'foo.bar.abc'\nif options.forceArrayNotation is set then:\nGenerates: 'test[123]-thisIsRegular-y' and 'foo[bar].abc'",
            "itemtype": "method",
            "name": "injectFieldIndices",
            "params": [
                {
                    "name": "field",
                    "description": "The field name",
                    "type": "String"
                },
                {
                    "name": "indexMap",
                    "description": "A map of variables",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "named parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "forceArrayNotation",
                            "description": "insetad of . for string values.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false]  Force the usage of ["
                        }
                    ]
                }
            ],
            "return": {
                "description": "the field string with array variables substituted",
                "type": "String"
            },
            "class": "Torso.Utils.handlebarsUtils",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 16,
            "description": "Changes DOM Nodes that are different, and leaves others untouched.\n\nAlgorithm:\nDelegates to a particular swapMethod, depending on the Node type.\nRecurses for nested Element Nodes only.\nThere is always room for optimizing this method.",
            "itemtype": "method",
            "name": "hotswap",
            "params": [
                {
                    "name": "currentNode",
                    "description": "The DOM Node corresponding to the existing page content to update",
                    "type": "Node"
                },
                {
                    "name": "newNode",
                    "description": "The detached DOM Node representing the desired DOM subtree",
                    "type": "Node"
                },
                {
                    "name": "ignoreElements",
                    "description": "Array of jQuery selectors for DOM Elements to ignore during render. Can be an expensive check.",
                    "type": "Array"
                }
            ],
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 42,
            "description": "Stickit will rely on the 'stickit-bind-val' jQuery data attribute to determine the value to use for a given option.\nIf the value DOM attribute is not the same as the stickit-bind-val, then this will clear the jquery data attribute\nso that stickit will use the value DOM attribute of the option.  This happens when templateRenderer merges\nthe attributes of the newNode into a current node of the same type when the current node has the stickit-bind-val\njQuery data attribute set.\n\nIf the node value is not set, then the stickit-bind-val might be how the view is communicating the value for stickit to use\n(possibly in the case of non-string values).  In this case trust the stickit-bind-val.",
            "params": [
                {
                    "name": "node",
                    "description": "the DoM element to test and fix the stickit data on.",
                    "type": "Node"
                }
            ],
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 174,
            "description": "Performs efficient re-rendering of a template.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "$el",
                    "description": "The Element to render into",
                    "type": "JQueryObject"
                },
                {
                    "name": "template",
                    "description": "The HBS template to apply",
                    "type": "Handlebars Template"
                },
                {
                    "name": "context",
                    "description": "The context object to pass to the template",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Other options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "force",
                            "description": "Will forcefully do a fresh render and not a diff-render",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "newHTML",
                            "description": "If you pass in newHTML, it will not use the template or context, but use this instead.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ignoreElements",
                            "description": "jQuery selectors of DOM elements to ignore during render. Can be an expensive check",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 200,
            "description": "Call this.hotswap but also keeps the caret position the same",
            "params": [
                {
                    "name": "currentNode",
                    "description": "The DOM Node corresponding to the existing page content to update",
                    "type": "Node"
                },
                {
                    "name": "newNode",
                    "description": "The detached DOM Node representing the desired DOM subtree",
                    "type": "Node"
                },
                {
                    "name": "ignoreElements",
                    "description": "Array of jQuery selectors for DOM Elements to ignore during render. Can be an expensive check.",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "hotswapKeepCaret",
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 231,
            "description": "Produces a copy of the element tag with attributes but with no contents",
            "params": [
                {
                    "name": "el",
                    "description": "the DOM element to be copied",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "a shallow copy of the element with no children but with attributes",
                "type": "Element"
            },
            "itemtype": "method",
            "name": "copyTopElement",
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 245,
            "description": "Determines if the element supports selection. As per spec, https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\nselection is only allowed for text, search, tel, url, password. Other input types will throw an exception in chrome",
            "params": [
                {
                    "name": "el",
                    "description": "the DOM element to check",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "boolean indicating whether or not the selection is allowed for {Element} el",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "supportsSelection",
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 256,
            "description": "Method that returns the current caret (cursor) position of a given element.\nSource: http://stackoverflow.com/questions/2897155/get-cursor-position-in-characters-within-a-text-input-field",
            "itemtype": "method",
            "name": "getCaretPosition",
            "params": [
                {
                    "name": "elem",
                    "description": "the DOM element to check caret position",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "the cursor index of the given element.",
                "type": "Integer"
            },
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/templateRenderer.js",
            "line": 286,
            "description": "Method that returns sets the current caret (cursor) position of a given element and puts it in focus.\nSource: http://stackoverflow.com/questions/512528/set-cursor-position-in-html-textbox",
            "itemtype": "method",
            "name": "setCaretPosition",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "caretPos",
                    "description": "The caret index to set",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the cursor index of the given element.",
                "type": "Integer"
            },
            "class": "Torso.Utils.templateRenderer",
            "module": "Torso",
            "namespace": "Torso.Utils"
        },
        {
            "file": "modules/validation.js",
            "line": 346,
            "description": "Check whether an attribute or a set of attributes are valid. It will default to use the model's current values but\nyou can pass in different values to use in the validation process instead.",
            "params": [
                {
                    "name": "attr",
                    "description": "Either the name of the attribute, an array containing many attribute names, or\non object with attribute name to values",
                    "type": "String or Object or Array"
                },
                {
                    "name": "value",
                    "description": "a value to use for the attribute value instead of using the model's value.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "undefined if no errors, a validation exception if a single attribute, or an object with attribute name as key\nand the error as the value"
            },
            "itemtype": "method",
            "name": "preValidate",
            "class": "Torso.validation",
            "module": "Torso",
            "namespace": "Torso"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: override",
            "line": " modules/behaviors/DataBehavior.js:225"
        },
        {
            "message": "unknown tag: override",
            "line": " modules/behaviors/DataBehavior.js:339"
        },
        {
            "message": "unknown tag: override",
            "line": " modules/Behavior.js:63"
        },
        {
            "message": "unknown tag: override",
            "line": " modules/View.js:27"
        },
        {
            "message": "Missing item type\nConverts string or number values into an array with a single string or number item.\nIf the input is not a string, number, array, or info about the ids then undefined is returned.\nThis is a private helper method used internally by this behavior and is not exposed in any way.",
            "line": " modules/behaviors/DataBehavior.js:29"
        },
        {
            "message": "Missing item type\nConverts any undefined or null values to an empty array.  All other values are left unchanged.",
            "line": " modules/behaviors/DataBehavior.js:52"
        },
        {
            "message": "Missing item type\nGets a nested property from an object, returning undefined if it doesn't exist on any level.",
            "line": " modules/behaviors/DataBehavior.js:64"
        },
        {
            "message": "Missing item type\nDetermines if the stringDefinition contains a container definition (i.e. has a ':' in it).",
            "line": " modules/behaviors/DataBehavior.js:79"
        },
        {
            "message": "Missing item type\nParses this.updateEvents configuration.",
            "line": " modules/behaviors/DataBehavior.js:480"
        },
        {
            "message": "Missing item type\nParses an individual event configuration.\nNote: events defined using objects can have more than one event defined w/in the object.",
            "line": " modules/behaviors/DataBehavior.js:491"
        },
        {
            "message": "Missing item type\nParses the idContainer property of ids.",
            "line": " modules/behaviors/DataBehavior.js:708"
        },
        {
            "message": "Missing item type\nParses a string that contains a container and details for that container (event name or property name).\nStrings are expected to be of the form '<some container path>:<detail>'.",
            "line": " modules/behaviors/DataBehavior.js:729"
        },
        {
            "message": "Missing item type\nParse a string type update event.\nContext Key (first part of the string up to the first ':') can be one of the following:\n  this (maps to the behavior),\n  view or empty (maps to the behavior's view),\n  viewState (maps to the behavior's view's viewState),\n  model (maps to the behavior's view's model),\n  <*> any others are assumed to be the names of behaviors on this behavior's view.",
            "line": " modules/behaviors/DataBehavior.js:776"
        },
        {
            "message": "Missing item type\nRejects the promise chain if this behavior is already disposed.",
            "line": " modules/behaviors/DataBehavior.js:798"
        },
        {
            "message": "Missing item type\nDetermines if the 'fetched' event should be triggered in the __fetchFailed or __fetchSuccess methods.",
            "line": " modules/behaviors/DataBehavior.js:871"
        },
        {
            "message": "Missing item type\nInstantiates the data objects and binds it to this behavior instance.",
            "line": " modules/behaviors/DataBehavior.js:938"
        },
        {
            "message": "Missing item type\nDispose of the data events.",
            "line": " modules/behaviors/DataBehavior.js:1088"
        },
        {
            "message": "Missing item type\nIn addition to removing the model from the collection also remove it from the list of tracked ids.",
            "line": " modules/mixins/cacheMixin.js:193"
        },
        {
            "message": "Missing item type\nSee {{#crossLink \"FormModel/trackModels:method\"}}.trackModels(){{/crossLink}}",
            "line": " modules/FormModel.js:321"
        },
        {
            "message": "Missing item type\nViewStateCell is a NestedCell that holds view state data and can trigger\nchange events. These changes events will propogate up and trigger on the view\nas well.",
            "line": " modules/View.js:15"
        },
        {
            "message": "Missing item type\nStickit will rely on the 'stickit-bind-val' jQuery data attribute to determine the value to use for a given option.\nIf the value DOM attribute is not the same as the stickit-bind-val, then this will clear the jquery data attribute\nso that stickit will use the value DOM attribute of the option.  This happens when templateRenderer merges\nthe attributes of the newNode into a current node of the same type when the current node has the stickit-bind-val\njQuery data attribute set.\n\nIf the node value is not set, then the stickit-bind-val might be how the view is communicating the value for stickit to use\n(possibly in the case of non-string values).  In this case trust the stickit-bind-val.",
            "line": " modules/templateRenderer.js:42"
        }
    ]
}